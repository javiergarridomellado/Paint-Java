/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica7;


import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
//import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.io.File;
//import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.media.Buffer;
//import javax.media.MediaLocator;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
//import javax.sound.sampled.AudioFileFormat;
//import javax.sound.sampled.AudioSystem;
import javax.swing.JButton;
//import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.fgm.imagen.FiltroSeno;
import sm.fgm.imagen.ConversionGrisOp;
import sm.fgm.imagen.EliminacionMitadBandaCentralOp;
import sm.fgm.imagen.PotenciaNesima;
import sm.fgm.imagen.RaizNesima;
import sm.fgm.imagen.RestaOp;
import sm.fgm.imagen.SumaOp;
import sm.fgm.imagen.TintadoOp;
import sm.fgm.imagen.TransformacionLogaritmica;
import sm.fgm.imagen.UmbralizacionOp;

import static sm.fgm.iu.Lienzo2Dfinal.FORMA_LINEA;
import static sm.fgm.iu.Lienzo2Dfinal.FORMA_OVALO;
import static sm.fgm.iu.Lienzo2Dfinal.FORMA_PUNTO;
import static sm.fgm.iu.Lienzo2Dfinal.FORMA_RECTANGULO;
import static sm.fgm.iu.Lienzo2Dfinal.FORMA_RECTANGULOREDONDEADO;
import static sm.fgm.iu.Lienzo2Dfinal.FORMA_CURVA;
import sm.fgm.iu.Lienzo2DImagenfinal;
import sm.image.BinaryOp;
import sm.image.ImageTools;
//import static sm.image.ImageTools.convertImageType;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.ThresholdOp;
import sm.sound.SMClipPlayer;
//import sm.image.TintOp;
/**
 *Clase VentanaPrincipal ,interfaz principal del programa,donde se encuentran casi todos los botones
 * y se trata multitud de eventos que son pasados al lienzo
 * @author javi
 */
public class VentanaPrincipal extends javax.swing.JFrame {
        private BufferedImage imgFuente;
        SMClipPlayer player;
        Hilo hebra=null;
    /**
     * Constructor con tama√±o por defecto
     * Creates new form VentanaPrinicpal
     */
    public VentanaPrincipal() {
        
        initComponents();
        this.setSize(1300, 700);
        //nuevoActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        barraAtributosImagenes = new javax.swing.JToolBar();
        jPanel5 = new javax.swing.JPanel();
        brilloSlider = new javax.swing.JSlider();
        jPanel6 = new javax.swing.JPanel();
        filtro = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        contraste = new javax.swing.JButton();
        iluminar = new javax.swing.JButton();
        oscurecer = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        sinusoidal = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        rotacion = new javax.swing.JSlider();
        rotacion90 = new javax.swing.JButton();
        rotacion180 = new javax.swing.JButton();
        rotacion270 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        aumentar = new javax.swing.JButton();
        disminuir = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        umbralSliderColor = new javax.swing.JSlider();
        umbralSliderGris = new javax.swing.JSlider();
        jPanel7 = new javax.swing.JPanel();
        aumentarBinaria = new javax.swing.JButton();
        disminuirBinaria = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        archivosGestion = new javax.swing.JPanel();
        nuevoArchivo = new javax.swing.JToggleButton();
        abrirArchivo = new javax.swing.JToggleButton();
        guardarArchivo = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        barraFormas = new javax.swing.JPanel();
        punto = new javax.swing.JToggleButton();
        linea = new javax.swing.JToggleButton();
        rectangulo = new javax.swing.JToggleButton();
        elipse = new javax.swing.JToggleButton();
        rectanguloRedondeado = new javax.swing.JToggleButton();
        curva = new javax.swing.JToggleButton();
        editar = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        barraAtrib = new javax.swing.JPanel();
        alisar = new javax.swing.JToggleButton();
        discontinuidad = new javax.swing.JToggleButton();
        grosor = new javax.swing.JSpinner();
        tipoRelleno = new javax.swing.JComboBox();
        tipoTransparencia = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JSeparator();
        barraColor = new javax.swing.JPanel();
        negro = new javax.swing.JButton();
        rojo = new javax.swing.JButton();
        azul = new javax.swing.JButton();
        blanco = new javax.swing.JButton();
        amarillo = new javax.swing.JButton();
        verde = new javax.swing.JButton();
        paletaColores = new javax.swing.JToggleButton();
        barraMultimedia = new javax.swing.JPanel();
        abrirReproduccion = new javax.swing.JButton();
        camara = new javax.swing.JButton();
        captura = new javax.swing.JButton();
        guardarAudio_ = new javax.swing.JButton();
        reproductorHebra = new javax.swing.JButton();
        open = new javax.swing.JButton();
        play = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        barraProgreso = new javax.swing.JProgressBar();
        escritorio = new javax.swing.JDesktopPane();
        jPanel3 = new javax.swing.JPanel();
        mostrar_Seleccion = new javax.swing.JLabel();
        mostrar_Color = new javax.swing.JLabel();
        mostrar_Relleno = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        nuevo = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        abrirAudio = new javax.swing.JMenuItem();
        guardarAudio = new javax.swing.JMenuItem();
        abrirVentanaReproduccion = new javax.swing.JMenuItem();
        abrirVentanaCamara = new javax.swing.JMenuItem();
        abrirVentanaCaptura = new javax.swing.JMenuItem();
        ver = new javax.swing.JMenu();
        ver_barra_estado = new javax.swing.JCheckBoxMenuItem();
        ver_barra_formas = new javax.swing.JCheckBoxMenuItem();
        ver_barra_atributos = new javax.swing.JCheckBoxMenuItem();
        ver_barra_atrib_imagen = new javax.swing.JCheckBoxMenuItem();
        men_imagen = new javax.swing.JMenu();
        rescaleOp = new javax.swing.JMenuItem();
        convolveOp = new javax.swing.JMenuItem();
        affineTransformOp = new javax.swing.JMenuItem();
        lookupOp = new javax.swing.JMenuItem();
        bandCombineOp = new javax.swing.JMenuItem();
        colorConvertOp = new javax.swing.JMenuItem();
        duplicar = new javax.swing.JMenuItem();
        negativo = new javax.swing.JMenuItem();
        propias = new javax.swing.JMenu();
        conversionGris = new javax.swing.JMenuItem();
        tintOp = new javax.swing.JMenuItem();
        transLogaritmo = new javax.swing.JMenuItem();
        raiznesima = new javax.swing.JMenuItem();
        potencianesima = new javax.swing.JMenuItem();
        eliminarMitadBandaCentral = new javax.swing.JMenuItem();
        men_info = new javax.swing.JMenu();
        acercaDe = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Practica Final FranciscoJavierGarridoMellado");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.BorderLayout());

        barraAtributosImagenes.setRollover(true);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        jPanel5.setMaximumSize(new java.awt.Dimension(180, 80));
        jPanel5.setMinimumSize(new java.awt.Dimension(180, 60));
        jPanel5.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel5.setLayout(new java.awt.GridLayout(2, 0));

        brilloSlider.setMaximum(255);
        brilloSlider.setMinimum(-255);
        brilloSlider.setToolTipText("Brillo");
        brilloSlider.setValue(0);
        brilloSlider.addChangeListener(formListener);
        brilloSlider.addFocusListener(formListener);
        jPanel5.add(brilloSlider);

        barraAtributosImagenes.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));
        jPanel6.setToolTipText("Filtros");
        jPanel6.setMaximumSize(new java.awt.Dimension(140, 32767));
        jPanel6.setPreferredSize(new java.awt.Dimension(130, 100));

        filtro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "FronterasLapl" }));
        filtro.setToolTipText("Filtros");
        filtro.addActionListener(formListener);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 118, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(0, 13, Short.MAX_VALUE)
                    .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 14, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 77, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(0, 28, Short.MAX_VALUE)
                    .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 29, Short.MAX_VALUE)))
        );

        barraAtributosImagenes.add(jPanel6);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 3);
        flowLayout1.setAlignOnBaseline(true);
        jPanel9.setLayout(flowLayout1);

        contraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/contraste.png"))); // NOI18N
        contraste.setToolTipText("Contraste");
        buttonGroup5.add(contraste);
        contraste.setPreferredSize(new java.awt.Dimension(33, 29));
        contraste.addActionListener(formListener);
        jPanel9.add(contraste);

        iluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/iluminar.png"))); // NOI18N
        iluminar.setToolTipText("Iluminar");
        buttonGroup5.add(iluminar);
        iluminar.setPreferredSize(new java.awt.Dimension(33, 29));
        iluminar.addActionListener(formListener);
        jPanel9.add(iluminar);

        oscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/oscurecer.png"))); // NOI18N
        oscurecer.setToolTipText("Oscurecer");
        buttonGroup5.add(oscurecer);
        oscurecer.setPreferredSize(new java.awt.Dimension(33, 29));
        oscurecer.addActionListener(formListener);
        jPanel9.add(oscurecer);

        barraAtributosImagenes.add(jPanel9);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Seno"));
        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1);
        flowLayout2.setAlignOnBaseline(true);
        jPanel10.setLayout(flowLayout2);

        sinusoidal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/sinusoidal.png"))); // NOI18N
        sinusoidal.setToolTipText("Seno");
        sinusoidal.setPreferredSize(new java.awt.Dimension(33, 29));
        sinusoidal.addActionListener(formListener);
        jPanel10.add(sinusoidal);

        barraAtributosImagenes.add(jPanel10);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotacion"));
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 4));

        rotacion.setMaximum(360);
        rotacion.setMinorTickSpacing(90);
        rotacion.setPaintTicks(true);
        rotacion.setToolTipText("Rotacion");
        rotacion.setValue(0);
        rotacion.setPreferredSize(new java.awt.Dimension(90, 23));
        rotacion.addChangeListener(formListener);
        rotacion.addFocusListener(formListener);
        jPanel11.add(rotacion);

        rotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion90.png"))); // NOI18N
        rotacion90.setToolTipText("Rotacion 90¬∫");
        rotacion90.setPreferredSize(new java.awt.Dimension(45, 25));
        rotacion90.addActionListener(formListener);
        jPanel11.add(rotacion90);

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion180.png"))); // NOI18N
        rotacion180.setToolTipText("Rotacion 180¬∫");
        rotacion180.setPreferredSize(new java.awt.Dimension(45, 25));
        rotacion180.addActionListener(formListener);
        jPanel11.add(rotacion180);

        rotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion270.png"))); // NOI18N
        rotacion270.setToolTipText("Rotacion 270¬∫");
        rotacion270.setPreferredSize(new java.awt.Dimension(45, 25));
        rotacion270.addActionListener(formListener);
        jPanel11.add(rotacion270);

        barraAtributosImagenes.add(jPanel11);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));
        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 2));

        aumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/aumentar.png"))); // NOI18N
        aumentar.setToolTipText("Aumentar Escala");
        aumentar.setPreferredSize(new java.awt.Dimension(45, 25));
        aumentar.addActionListener(formListener);
        jPanel12.add(aumentar);

        disminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/disminuir.png"))); // NOI18N
        disminuir.setToolTipText("Disminuir Escala");
        disminuir.setPreferredSize(new java.awt.Dimension(45, 25));
        disminuir.addActionListener(formListener);
        jPanel12.add(disminuir);

        barraAtributosImagenes.add(jPanel12);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Umbralizacion Color y Gris"));
        java.awt.FlowLayout flowLayout3 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 1);
        flowLayout3.setAlignOnBaseline(true);
        jPanel4.setLayout(flowLayout3);

        umbralSliderColor.setMaximum(255);
        umbralSliderColor.setToolTipText("Umbralizacion Color");
        umbralSliderColor.setValue(128);
        umbralSliderColor.setPreferredSize(new java.awt.Dimension(100, 23));
        umbralSliderColor.addChangeListener(formListener);
        umbralSliderColor.addFocusListener(formListener);
        jPanel4.add(umbralSliderColor);

        umbralSliderGris.setMaximum(255);
        umbralSliderGris.setToolTipText("Umbralizacion Gris");
        umbralSliderGris.setValue(128);
        umbralSliderGris.setPreferredSize(new java.awt.Dimension(100, 23));
        umbralSliderGris.addChangeListener(formListener);
        umbralSliderGris.addFocusListener(formListener);
        jPanel4.add(umbralSliderGris);

        barraAtributosImagenes.add(jPanel4);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Binarias"));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 2));

        aumentarBinaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/suma.png"))); // NOI18N
        aumentarBinaria.setToolTipText("SumaOp");
        aumentarBinaria.setPreferredSize(new java.awt.Dimension(49, 25));
        aumentarBinaria.addActionListener(formListener);
        jPanel7.add(aumentarBinaria);

        disminuirBinaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/resta.png"))); // NOI18N
        disminuirBinaria.setToolTipText("SubstractOp");
        disminuirBinaria.setPreferredSize(new java.awt.Dimension(49, 25));
        disminuirBinaria.addActionListener(formListener);
        jPanel7.add(disminuirBinaria);

        barraAtributosImagenes.add(jPanel7);

        jPanel1.add(barraAtributosImagenes, java.awt.BorderLayout.PAGE_END);

        jPanel2.setPreferredSize(new java.awt.Dimension(854, 43));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        archivosGestion.setMinimumSize(new java.awt.Dimension(120, 39));
        archivosGestion.setPreferredSize(new java.awt.Dimension(87, 100));
        archivosGestion.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 5));

        buttonGroup6.add(nuevoArchivo);
        nuevoArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/nuevo.png"))); // NOI18N
        nuevoArchivo.setToolTipText("Nuevo");
        nuevoArchivo.setBorder(null);
        nuevoArchivo.setPreferredSize(new java.awt.Dimension(27, 27));
        nuevoArchivo.addActionListener(formListener);
        archivosGestion.add(nuevoArchivo);

        buttonGroup6.add(abrirArchivo);
        abrirArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/abrir.png"))); // NOI18N
        abrirArchivo.setToolTipText("Abrir");
        abrirArchivo.setBorderPainted(false);
        abrirArchivo.setPreferredSize(new java.awt.Dimension(27, 27));
        abrirArchivo.addActionListener(formListener);
        archivosGestion.add(abrirArchivo);

        buttonGroup6.add(guardarArchivo);
        guardarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/guardar.png"))); // NOI18N
        guardarArchivo.setToolTipText("Guardar");
        guardarArchivo.setPreferredSize(new java.awt.Dimension(27, 27));
        guardarArchivo.addActionListener(formListener);
        archivosGestion.add(guardarArchivo);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(2, 25));
        archivosGestion.add(jSeparator1);

        jPanel2.add(archivosGestion);

        barraFormas.setMinimumSize(new java.awt.Dimension(404, 39));
        barraFormas.setName(""); // NOI18N
        barraFormas.setPreferredSize(new java.awt.Dimension(200, 100));
        barraFormas.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 5));

        buttonGroup1.add(punto);
        punto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/punto.png"))); // NOI18N
        punto.setToolTipText("Punto");
        punto.setMaximumSize(new java.awt.Dimension(57, 31));
        punto.setMinimumSize(new java.awt.Dimension(57, 31));
        punto.setPreferredSize(new java.awt.Dimension(27, 27));
        punto.addActionListener(formListener);
        barraFormas.add(punto);

        buttonGroup1.add(linea);
        linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/linea.png"))); // NOI18N
        linea.setToolTipText("Linea");
        linea.setPreferredSize(new java.awt.Dimension(27, 27));
        linea.addActionListener(formListener);
        barraFormas.add(linea);

        buttonGroup1.add(rectangulo);
        rectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rectangulo.png"))); // NOI18N
        rectangulo.setToolTipText("Rectangulo");
        rectangulo.setPreferredSize(new java.awt.Dimension(27, 27));
        rectangulo.addActionListener(formListener);
        barraFormas.add(rectangulo);

        buttonGroup1.add(elipse);
        elipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/elipse.png"))); // NOI18N
        elipse.setToolTipText("Elipse");
        elipse.setPreferredSize(new java.awt.Dimension(27, 27));
        elipse.addActionListener(formListener);
        barraFormas.add(elipse);

        buttonGroup1.add(rectanguloRedondeado);
        rectanguloRedondeado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/iconos/rectangleredondeado.png"))); // NOI18N
        rectanguloRedondeado.setToolTipText("Rectangulo Redondeado");
        rectanguloRedondeado.setPreferredSize(new java.awt.Dimension(27, 27));
        rectanguloRedondeado.addActionListener(formListener);
        barraFormas.add(rectanguloRedondeado);

        buttonGroup1.add(curva);
        curva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/iconos/curva.gif"))); // NOI18N
        curva.setToolTipText("Curva");
        curva.setPreferredSize(new java.awt.Dimension(27, 27));
        curva.addActionListener(formListener);
        barraFormas.add(curva);

        editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/seleccion.png"))); // NOI18N
        editar.setToolTipText("Editar");
        editar.setPreferredSize(new java.awt.Dimension(27, 27));
        editar.addActionListener(formListener);
        barraFormas.add(editar);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(2, 25));
        barraFormas.add(jSeparator2);

        jPanel2.add(barraFormas);

        barraAtrib.setPreferredSize(new java.awt.Dimension(285, 100));
        barraAtrib.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 5));

        alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/alisar.png"))); // NOI18N
        alisar.setToolTipText("Alisar");
        alisar.setPreferredSize(new java.awt.Dimension(27, 27));
        alisar.addActionListener(formListener);
        barraAtrib.add(alisar);

        discontinuidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/discontinuidad.jpg"))); // NOI18N
        discontinuidad.setToolTipText("Discontinuidad");
        discontinuidad.setPreferredSize(new java.awt.Dimension(27, 27));
        discontinuidad.addActionListener(formListener);
        barraAtrib.add(discontinuidad);

        grosor.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        grosor.setToolTipText("Grosor");
        grosor.setPreferredSize(new java.awt.Dimension(44, 25));
        grosor.addChangeListener(formListener);
        barraAtrib.add(grosor);

        tipoRelleno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sin Relleno", "Solido", "Degradado Horizontal", "Degradado Vertical" }));
        tipoRelleno.setToolTipText("Relleno");
        tipoRelleno.setPreferredSize(new java.awt.Dimension(120, 20));
        tipoRelleno.addActionListener(formListener);
        barraAtrib.add(tipoRelleno);

        tipoTransparencia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sin", "25%", "50%", "75%" }));
        tipoTransparencia.setToolTipText("Transparencia");
        tipoTransparencia.addActionListener(formListener);
        barraAtrib.add(tipoTransparencia);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(2, 25));
        barraAtrib.add(jSeparator3);

        jPanel2.add(barraAtrib);

        barraColor.setMinimumSize(new java.awt.Dimension(100, 100));
        barraColor.setPreferredSize(new java.awt.Dimension(175, 100));
        barraColor.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 5));

        negro.setBackground(new java.awt.Color(0, 0, 0));
        negro.setToolTipText("Negro");
        buttonGroup2.add(negro);
        negro.setPreferredSize(new java.awt.Dimension(22, 22));
        negro.addActionListener(formListener);
        barraColor.add(negro);

        rojo.setBackground(new java.awt.Color(255, 0, 51));
        rojo.setToolTipText("Rojo");
        buttonGroup2.add(rojo);
        rojo.setPreferredSize(new java.awt.Dimension(22, 22));
        rojo.addActionListener(formListener);
        barraColor.add(rojo);

        azul.setBackground(new java.awt.Color(0, 0, 204));
        azul.setToolTipText("Azul");
        buttonGroup2.add(azul);
        azul.setPreferredSize(new java.awt.Dimension(22, 22));
        azul.addActionListener(formListener);
        barraColor.add(azul);

        blanco.setBackground(new java.awt.Color(255, 255, 255));
        blanco.setToolTipText("Blanco");
        buttonGroup2.add(blanco);
        blanco.setPreferredSize(new java.awt.Dimension(22, 22));
        blanco.addActionListener(formListener);
        barraColor.add(blanco);

        amarillo.setBackground(new java.awt.Color(255, 255, 0));
        amarillo.setToolTipText("Amarillo");
        buttonGroup2.add(amarillo);
        amarillo.setPreferredSize(new java.awt.Dimension(22, 22));
        amarillo.addActionListener(formListener);
        barraColor.add(amarillo);

        verde.setBackground(new java.awt.Color(0, 204, 0));
        verde.setToolTipText("Verde");
        buttonGroup2.add(verde);
        verde.setPreferredSize(new java.awt.Dimension(22, 22));
        verde.addActionListener(formListener);
        barraColor.add(verde);

        buttonGroup2.add(paletaColores);
        paletaColores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/Colors.png"))); // NOI18N
        paletaColores.setToolTipText("Paleta de Colores");
        paletaColores.setPreferredSize(new java.awt.Dimension(22, 22));
        paletaColores.addActionListener(formListener);
        barraColor.add(paletaColores);

        jPanel2.add(barraColor);

        barraMultimedia.setPreferredSize(new java.awt.Dimension(420, 100));
        barraMultimedia.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 5));

        abrirReproduccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/AbrirMedio.png"))); // NOI18N
        abrirReproduccion.setToolTipText("Abrir Multimedia");
        buttonGroup7.add(abrirReproduccion);
        abrirReproduccion.setPreferredSize(new java.awt.Dimension(27, 27));
        abrirReproduccion.addActionListener(formListener);
        barraMultimedia.add(abrirReproduccion);

        camara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/Camara.png"))); // NOI18N
        camara.setToolTipText("WebCam");
        buttonGroup7.add(camara);
        camara.setPreferredSize(new java.awt.Dimension(27, 27));
        camara.addActionListener(formListener);
        barraMultimedia.add(camara);

        captura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/Capturar.png"))); // NOI18N
        captura.setToolTipText("Capturar");
        buttonGroup7.add(captura);
        captura.setPreferredSize(new java.awt.Dimension(27, 27));
        captura.addActionListener(formListener);
        barraMultimedia.add(captura);

        guardarAudio_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/record24x24.png"))); // NOI18N
        guardarAudio_.setToolTipText("Grabar Audio");
        buttonGroup7.add(guardarAudio_);
        guardarAudio_.setPreferredSize(new java.awt.Dimension(27, 27));
        guardarAudio_.addActionListener(formListener);
        barraMultimedia.add(guardarAudio_);

        reproductorHebra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/AbrirMedio.png"))); // NOI18N
        reproductorHebra.setToolTipText("ReproductorHebra");
        reproductorHebra.setPreferredSize(new java.awt.Dimension(27, 27));
        reproductorHebra.addActionListener(formListener);
        barraMultimedia.add(reproductorHebra);

        open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/go_top.png"))); // NOI18N
        open.setToolTipText("Open");
        buttonGroup8.add(open);
        open.setPreferredSize(new java.awt.Dimension(27, 27));
        open.addActionListener(formListener);
        barraMultimedia.add(open);

        play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/play24x24.png"))); // NOI18N
        play.setToolTipText("Play");
        buttonGroup8.add(play);
        play.setPreferredSize(new java.awt.Dimension(27, 27));
        play.addActionListener(formListener);
        barraMultimedia.add(play);

        pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/pausa24x24.png"))); // NOI18N
        pause.setToolTipText("Pause");
        buttonGroup8.add(pause);
        pause.setPreferredSize(new java.awt.Dimension(27, 27));
        pause.addActionListener(formListener);
        barraMultimedia.add(pause);

        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/stop24x24.png"))); // NOI18N
        stop.setToolTipText("Stop");
        buttonGroup8.add(stop);
        stop.setPreferredSize(new java.awt.Dimension(27, 27));
        stop.addActionListener(formListener);
        barraMultimedia.add(stop);

        barraProgreso.setToolTipText("Barra de Progreso");
        barraMultimedia.add(barraProgreso);

        jPanel2.add(barraMultimedia);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1569, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );

        jPanel1.add(escritorio, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.BorderLayout());

        mostrar_Seleccion.setText("Barra de Estado");
        jPanel3.add(mostrar_Seleccion, java.awt.BorderLayout.PAGE_START);

        mostrar_Color.setText("Color Borde");
        jPanel3.add(mostrar_Color, java.awt.BorderLayout.CENTER);

        mostrar_Relleno.setText("Color Relleno");
        jPanel3.add(mostrar_Relleno, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        archivo.setText("Archivo");

        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/nuevo.png"))); // NOI18N
        nuevo.setText("Nuevo");
        buttonGroup3.add(nuevo);
        nuevo.addActionListener(formListener);
        archivo.add(nuevo);

        abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/abrir.png"))); // NOI18N
        abrir.setText("Abrir");
        buttonGroup3.add(abrir);
        abrir.addActionListener(formListener);
        archivo.add(abrir);

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/guardar.png"))); // NOI18N
        guardar.setText("Guardar");
        buttonGroup3.add(guardar);
        guardar.addActionListener(formListener);
        archivo.add(guardar);

        abrirAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/openAudio24x24.png"))); // NOI18N
        abrirAudio.setText("Abrir Audio");
        abrirAudio.addActionListener(formListener);
        archivo.add(abrirAudio);

        guardarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/record24x24.png"))); // NOI18N
        guardarAudio.setText("Guardar Audio");
        guardarAudio.addActionListener(formListener);
        archivo.add(guardarAudio);

        abrirVentanaReproduccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/AbrirMedio.png"))); // NOI18N
        abrirVentanaReproduccion.setText("Ventana Reproduccion");
        abrirVentanaReproduccion.addActionListener(formListener);
        archivo.add(abrirVentanaReproduccion);

        abrirVentanaCamara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/Camara.png"))); // NOI18N
        abrirVentanaCamara.setText("Ventana Camara");
        abrirVentanaCamara.addActionListener(formListener);
        archivo.add(abrirVentanaCamara);

        abrirVentanaCaptura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/Capturar.png"))); // NOI18N
        abrirVentanaCaptura.setText("Ventana Captura");
        abrirVentanaCaptura.addActionListener(formListener);
        archivo.add(abrirVentanaCaptura);

        jMenuBar1.add(archivo);

        ver.setText("Ver");

        ver_barra_estado.setSelected(true);
        ver_barra_estado.setText("Barra de estado");
        ver_barra_estado.addActionListener(formListener);
        ver.add(ver_barra_estado);

        ver_barra_formas.setSelected(true);
        ver_barra_formas.setText("Barra de formas");
        ver_barra_formas.addActionListener(formListener);
        ver.add(ver_barra_formas);

        ver_barra_atributos.setSelected(true);
        ver_barra_atributos.setText("Barra de atributos");
        ver_barra_atributos.addActionListener(formListener);
        ver.add(ver_barra_atributos);

        ver_barra_atrib_imagen.setSelected(true);
        ver_barra_atrib_imagen.setText("Barra atrib. Imagen");
        ver_barra_atrib_imagen.addActionListener(formListener);
        ver.add(ver_barra_atrib_imagen);

        jMenuBar1.add(ver);

        men_imagen.setText("Imagen");

        rescaleOp.setText("RescaleOp");
        rescaleOp.addActionListener(formListener);
        men_imagen.add(rescaleOp);

        convolveOp.setText("ConvolveOp");
        convolveOp.addActionListener(formListener);
        men_imagen.add(convolveOp);

        affineTransformOp.setText("AffineTransformOp");
        affineTransformOp.addActionListener(formListener);
        men_imagen.add(affineTransformOp);

        lookupOp.setText("LookupOp");
        lookupOp.addActionListener(formListener);
        men_imagen.add(lookupOp);

        bandCombineOp.setText("BandCombineOp");
        bandCombineOp.addActionListener(formListener);
        men_imagen.add(bandCombineOp);

        colorConvertOp.setText("ColorConvertOp");
        colorConvertOp.addActionListener(formListener);
        men_imagen.add(colorConvertOp);

        duplicar.setText("Duplicar");
        duplicar.addActionListener(formListener);
        men_imagen.add(duplicar);

        negativo.setText("Negativo");
        negativo.addActionListener(formListener);
        men_imagen.add(negativo);

        propias.setText("Operaciones Propias");

        conversionGris.setText("ConversionGris");
        conversionGris.addActionListener(formListener);
        propias.add(conversionGris);

        tintOp.setText("TintadoOp");
        tintOp.addActionListener(formListener);
        propias.add(tintOp);

        transLogaritmo.setText("Transf.Logaritmo");
        transLogaritmo.addActionListener(formListener);
        propias.add(transLogaritmo);

        raiznesima.setText("Raiz n-esima");
        raiznesima.addActionListener(formListener);
        propias.add(raiznesima);

        potencianesima.setText("Potencia n-esima");
        potencianesima.addActionListener(formListener);
        propias.add(potencianesima);

        eliminarMitadBandaCentral.setText("Eliminar MitadBandaCentral");
        eliminarMitadBandaCentral.addActionListener(formListener);
        propias.add(eliminarMitadBandaCentral);

        men_imagen.add(propias);

        jMenuBar1.add(men_imagen);

        men_info.setText("Ayuda");

        acercaDe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/info_icon.png"))); // NOI18N
        acercaDe.setText("Acerca de");
        acercaDe.addActionListener(formListener);
        men_info.add(acercaDe);

        jMenuBar1.add(men_info);

        setJMenuBar(jMenuBar1);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == filtro) {
                VentanaPrincipal.this.filtroActionPerformed(evt);
            }
            else if (evt.getSource() == contraste) {
                VentanaPrincipal.this.contrasteActionPerformed(evt);
            }
            else if (evt.getSource() == iluminar) {
                VentanaPrincipal.this.iluminarActionPerformed(evt);
            }
            else if (evt.getSource() == oscurecer) {
                VentanaPrincipal.this.oscurecerActionPerformed(evt);
            }
            else if (evt.getSource() == sinusoidal) {
                VentanaPrincipal.this.sinusoidalActionPerformed(evt);
            }
            else if (evt.getSource() == rotacion90) {
                VentanaPrincipal.this.rotacion90ActionPerformed(evt);
            }
            else if (evt.getSource() == rotacion180) {
                VentanaPrincipal.this.rotacion180ActionPerformed(evt);
            }
            else if (evt.getSource() == rotacion270) {
                VentanaPrincipal.this.rotacion270ActionPerformed(evt);
            }
            else if (evt.getSource() == aumentar) {
                VentanaPrincipal.this.aumentarActionPerformed(evt);
            }
            else if (evt.getSource() == disminuir) {
                VentanaPrincipal.this.disminuirActionPerformed(evt);
            }
            else if (evt.getSource() == aumentarBinaria) {
                VentanaPrincipal.this.aumentarBinariaActionPerformed(evt);
            }
            else if (evt.getSource() == disminuirBinaria) {
                VentanaPrincipal.this.disminuirBinariaActionPerformed(evt);
            }
            else if (evt.getSource() == nuevoArchivo) {
                VentanaPrincipal.this.nuevoArchivoActionPerformed(evt);
            }
            else if (evt.getSource() == abrirArchivo) {
                VentanaPrincipal.this.abrirArchivoActionPerformed(evt);
            }
            else if (evt.getSource() == guardarArchivo) {
                VentanaPrincipal.this.guardarArchivoActionPerformed(evt);
            }
            else if (evt.getSource() == punto) {
                VentanaPrincipal.this.puntoActionPerformed(evt);
            }
            else if (evt.getSource() == linea) {
                VentanaPrincipal.this.lineaActionPerformed(evt);
            }
            else if (evt.getSource() == rectangulo) {
                VentanaPrincipal.this.rectanguloActionPerformed(evt);
            }
            else if (evt.getSource() == elipse) {
                VentanaPrincipal.this.elipseActionPerformed(evt);
            }
            else if (evt.getSource() == rectanguloRedondeado) {
                VentanaPrincipal.this.rectanguloRedondeadoActionPerformed(evt);
            }
            else if (evt.getSource() == curva) {
                VentanaPrincipal.this.curvaActionPerformed(evt);
            }
            else if (evt.getSource() == editar) {
                VentanaPrincipal.this.editarActionPerformed(evt);
            }
            else if (evt.getSource() == alisar) {
                VentanaPrincipal.this.alisarActionPerformed(evt);
            }
            else if (evt.getSource() == discontinuidad) {
                VentanaPrincipal.this.discontinuidadActionPerformed(evt);
            }
            else if (evt.getSource() == tipoRelleno) {
                VentanaPrincipal.this.tipoRellenoActionPerformed(evt);
            }
            else if (evt.getSource() == tipoTransparencia) {
                VentanaPrincipal.this.tipoTransparenciaActionPerformed(evt);
            }
            else if (evt.getSource() == negro) {
                VentanaPrincipal.this.negroActionPerformed(evt);
            }
            else if (evt.getSource() == rojo) {
                VentanaPrincipal.this.rojoActionPerformed(evt);
            }
            else if (evt.getSource() == azul) {
                VentanaPrincipal.this.azulActionPerformed(evt);
            }
            else if (evt.getSource() == blanco) {
                VentanaPrincipal.this.blancoActionPerformed(evt);
            }
            else if (evt.getSource() == amarillo) {
                VentanaPrincipal.this.amarilloActionPerformed(evt);
            }
            else if (evt.getSource() == verde) {
                VentanaPrincipal.this.verdeActionPerformed(evt);
            }
            else if (evt.getSource() == paletaColores) {
                VentanaPrincipal.this.paletaColoresActionPerformed(evt);
            }
            else if (evt.getSource() == abrirReproduccion) {
                VentanaPrincipal.this.abrirReproduccionActionPerformed(evt);
            }
            else if (evt.getSource() == camara) {
                VentanaPrincipal.this.camaraActionPerformed(evt);
            }
            else if (evt.getSource() == captura) {
                VentanaPrincipal.this.capturaActionPerformed(evt);
            }
            else if (evt.getSource() == guardarAudio_) {
                VentanaPrincipal.this.guardarAudio_ActionPerformed(evt);
            }
            else if (evt.getSource() == reproductorHebra) {
                VentanaPrincipal.this.reproductorHebraActionPerformed(evt);
            }
            else if (evt.getSource() == nuevo) {
                VentanaPrincipal.this.nuevoActionPerformed(evt);
            }
            else if (evt.getSource() == abrir) {
                VentanaPrincipal.this.abrirActionPerformed(evt);
            }
            else if (evt.getSource() == guardar) {
                VentanaPrincipal.this.guardarActionPerformed(evt);
            }
            else if (evt.getSource() == abrirAudio) {
                VentanaPrincipal.this.abrirAudioActionPerformed(evt);
            }
            else if (evt.getSource() == guardarAudio) {
                VentanaPrincipal.this.guardarAudioActionPerformed(evt);
            }
            else if (evt.getSource() == abrirVentanaReproduccion) {
                VentanaPrincipal.this.abrirVentanaReproduccionActionPerformed(evt);
            }
            else if (evt.getSource() == abrirVentanaCamara) {
                VentanaPrincipal.this.abrirVentanaCamaraActionPerformed(evt);
            }
            else if (evt.getSource() == abrirVentanaCaptura) {
                VentanaPrincipal.this.abrirVentanaCapturaActionPerformed(evt);
            }
            else if (evt.getSource() == ver_barra_estado) {
                VentanaPrincipal.this.ver_barra_estadoActionPerformed(evt);
            }
            else if (evt.getSource() == ver_barra_formas) {
                VentanaPrincipal.this.ver_barra_formasActionPerformed(evt);
            }
            else if (evt.getSource() == ver_barra_atributos) {
                VentanaPrincipal.this.ver_barra_atributosActionPerformed(evt);
            }
            else if (evt.getSource() == ver_barra_atrib_imagen) {
                VentanaPrincipal.this.ver_barra_atrib_imagenActionPerformed(evt);
            }
            else if (evt.getSource() == rescaleOp) {
                VentanaPrincipal.this.rescaleOpActionPerformed(evt);
            }
            else if (evt.getSource() == convolveOp) {
                VentanaPrincipal.this.convolveOpActionPerformed(evt);
            }
            else if (evt.getSource() == affineTransformOp) {
                VentanaPrincipal.this.affineTransformOpActionPerformed(evt);
            }
            else if (evt.getSource() == lookupOp) {
                VentanaPrincipal.this.lookupOpActionPerformed(evt);
            }
            else if (evt.getSource() == bandCombineOp) {
                VentanaPrincipal.this.bandCombineOpActionPerformed(evt);
            }
            else if (evt.getSource() == colorConvertOp) {
                VentanaPrincipal.this.colorConvertOpActionPerformed(evt);
            }
            else if (evt.getSource() == duplicar) {
                VentanaPrincipal.this.duplicarActionPerformed(evt);
            }
            else if (evt.getSource() == negativo) {
                VentanaPrincipal.this.negativoActionPerformed(evt);
            }
            else if (evt.getSource() == conversionGris) {
                VentanaPrincipal.this.conversionGrisActionPerformed(evt);
            }
            else if (evt.getSource() == tintOp) {
                VentanaPrincipal.this.tintOpActionPerformed(evt);
            }
            else if (evt.getSource() == transLogaritmo) {
                VentanaPrincipal.this.transLogaritmoActionPerformed(evt);
            }
            else if (evt.getSource() == raiznesima) {
                VentanaPrincipal.this.raiznesimaActionPerformed(evt);
            }
            else if (evt.getSource() == potencianesima) {
                VentanaPrincipal.this.potencianesimaActionPerformed(evt);
            }
            else if (evt.getSource() == eliminarMitadBandaCentral) {
                VentanaPrincipal.this.eliminarMitadBandaCentralActionPerformed(evt);
            }
            else if (evt.getSource() == acercaDe) {
                VentanaPrincipal.this.acercaDeActionPerformed(evt);
            }
            else if (evt.getSource() == open) {
                VentanaPrincipal.this.openActionPerformed(evt);
            }
            else if (evt.getSource() == play) {
                VentanaPrincipal.this.playActionPerformed(evt);
            }
            else if (evt.getSource() == pause) {
                VentanaPrincipal.this.pauseActionPerformed(evt);
            }
            else if (evt.getSource() == stop) {
                VentanaPrincipal.this.stopActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == brilloSlider) {
                VentanaPrincipal.this.brilloSliderFocusGained(evt);
            }
            else if (evt.getSource() == rotacion) {
                VentanaPrincipal.this.rotacionFocusGained(evt);
            }
            else if (evt.getSource() == umbralSliderColor) {
                VentanaPrincipal.this.umbralSliderColorFocusGained(evt);
            }
            else if (evt.getSource() == umbralSliderGris) {
                VentanaPrincipal.this.umbralSliderGrisFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == brilloSlider) {
                VentanaPrincipal.this.brilloSliderFocusLost(evt);
            }
            else if (evt.getSource() == rotacion) {
                VentanaPrincipal.this.rotacionFocusLost(evt);
            }
            else if (evt.getSource() == umbralSliderColor) {
                VentanaPrincipal.this.umbralSliderColorFocusLost(evt);
            }
            else if (evt.getSource() == umbralSliderGris) {
                VentanaPrincipal.this.umbralSliderGrisFocusLost(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == brilloSlider) {
                VentanaPrincipal.this.brilloSliderStateChanged(evt);
            }
            else if (evt.getSource() == rotacion) {
                VentanaPrincipal.this.rotacionStateChanged(evt);
            }
            else if (evt.getSource() == umbralSliderColor) {
                VentanaPrincipal.this.umbralSliderColorStateChanged(evt);
            }
            else if (evt.getSource() == umbralSliderGris) {
                VentanaPrincipal.this.umbralSliderGrisStateChanged(evt);
            }
            else if (evt.getSource() == grosor) {
                VentanaPrincipal.this.grosorStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents
/**
 * Llama a nuevoArchivoActionPerformed(evt)
 * @param evt ActionEvent
 */
    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        nuevoArchivoActionPerformed(evt);
    }//GEN-LAST:event_nuevoActionPerformed
  

    /**
     * Llama a abrirArchivoActionPerformed(evt)
     * @param evt ActionEvent
     */
    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
          abrirArchivoActionPerformed(evt);
    }//GEN-LAST:event_abrirActionPerformed
/**
 * Llama a guardarArchivoActionPerformed(evt)
 * @param evt ActionEvent
 */
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        guardarArchivoActionPerformed(evt);
    }//GEN-LAST:event_guardarActionPerformed
/**
 * Aplica el operador RescaleOp
 * @param evt ActionEvent
 */
    private void rescaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescaleOpActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null) &&( vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
            try{
            
            BufferedImage imgdest = rop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            imgSource=convertImageType(imgSource,BufferedImage.TYPE_INT_RGB);
            BufferedImage imgdest = rop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
            //System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_rescaleOpActionPerformed
/**
 *Recoge Evento StateChange y aplica RescaleOp(brillo) segun valor del slider
 * @param evt ChangeEvent
 */
    private void brilloSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloSliderStateChanged
        JInternalFrame vi = this.escritorio.getSelectedFrame();
        //imgFuente = vi.getLienzo().getImage();
    if ((vi != null) &&( vi instanceof VentanaInterna) && (this.imgFuente != null)) {
      try
      {
     
        
        if (this.imgFuente.getColorModel().hasAlpha())
        {
          float[] alfa = { 1.0f, 1.0f, 1.0f, 1.0f }; //RGBA
         
          float[] beta = { (float)brilloSlider.getValue(), (float)brilloSlider.getValue(), (float)brilloSlider.getValue(), 0.0f };
          RescaleOp rop = new RescaleOp(alfa, beta, null);
          BufferedImage imgtemp = rop.filter(this.imgFuente, null);
          ((VentanaInterna)vi).getLienzo().setImage(imgtemp);
          ((VentanaInterna)vi).getLienzo().repaint();
        }
        else
        {
          //rop = new RescaleOp(1.0F, this.brilloSlider.getValue(), null);
          RescaleOp rop=new RescaleOp(1.0f, (float)brilloSlider.getValue(),null);
          BufferedImage imgtemp = rop.filter(this.imgFuente, null);
          ((VentanaInterna)vi).getLienzo().setImage(imgtemp);
          ((VentanaInterna)vi).getLienzo().repaint();
        }
        
      }
      catch (Exception e)
      {
        System.err.println("Error en la operaci√≥n ('" + e.getLocalizedMessage() + "')");
      }
    }
    }//GEN-LAST:event_brilloSliderStateChanged
/**
 * Aplica operacion ConvolveOp mascara de convolucion con unos valores predeterminados
 * @param evt ActionEvent
 */
    private void convolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolveOpActionPerformed
       JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&& ( vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            try{
            float m[]={0.1f,0.1f,0.1f,0.1f,0.1f,0.1f,0.1f,0.1f,0.1f};
            Kernel k= new Kernel(3,3,m);
            ConvolveOp cop = new ConvolveOp(k);
            BufferedImage imgdest = cop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_convolveOpActionPerformed
/**
 * El slider recibe foco de atencion, se captura imagen a manipular
 * @param evt FocusEvent
 */
    private void brilloSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusGained
         JInternalFrame vi = this.escritorio.getSelectedFrame();
         if((vi!=null)&&(vi instanceof VentanaInterna)){
             imgFuente= ((VentanaInterna)vi).getLienzo().getImage();
         }else{
             imgFuente= null;
         }
         
  
    }//GEN-LAST:event_brilloSliderFocusGained
/**
 * El slider pierde el foco de atencion, se deja la variable imagen a null y el deslizador con su valor por defecto
 * @param evt java.awt.event.FocusEvent
 * 
 */
    private void brilloSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusLost
        this.imgFuente = null;
        this.brilloSlider.setValue(0);
    }//GEN-LAST:event_brilloSliderFocusLost
/**
 * Aplica filtro segun seleccion en Combobox
 * @param evt ActionEvent
 */
    private void filtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroActionPerformed
        JInternalFrame vi = this.escritorio.getSelectedFrame();
         if((vi!=null)&&(vi instanceof VentanaInterna)){
             BufferedImage imgF = ((VentanaInterna)vi).getLienzo().getImage();
             if(imgF!=null){
                try{ 
                int fil= filtro.getSelectedIndex();
                Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                if(fil==0){
                    k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3); 
                }else if(fil==1){
                     k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                }else if(fil==2){
                     k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                }else if(fil==3){
                     k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                }else if(fil==4){
                    k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3); 
                }
               // Kernel k = KernelProducer.createKernel(this.filtro.getSelectedIndex());
                ConvolveOp cop = new ConvolveOp(k);
                BufferedImage imgdest = cop.filter(imgF, null);
                ((VentanaInterna)vi).getLienzo().setImage(imgdest);
                ((VentanaInterna)vi).getLienzo().repaint();
             }      catch (Exception e)
      {
        System.err.println("Error en la operaci√≥n ('" + e.getLocalizedMessage() + "')");
      }
         }
         }
    }//GEN-LAST:event_filtroActionPerformed
/**
 * Recoge evento de seleccion de color negro
 * @param evt ActionEvent
 */
    private void negroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negroActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        
             if ((vi != null)&&(vi instanceof VentanaInterna)){ ((VentanaInterna)vi).getLienzo().setColor(Color.BLACK);
           repaint();
           if(!((VentanaInterna)vi).getLienzo().isRelleno()){
             mostrar_Color.setText("Color Borde: Negro");
           }else{
              mostrar_Relleno.setText("Color Relleno: Negro");  
           }
             }
    }//GEN-LAST:event_negroActionPerformed
/**
 * Recoge evento de seleccion de color rojo
 * @param evt ActionEvent
 */
    private void rojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rojoActionPerformed
       JInternalFrame vi = escritorio.getSelectedFrame();
           if ((vi != null)&&(vi instanceof VentanaInterna)){ ((VentanaInterna)vi).getLienzo().setColor(Color.RED);
             
             repaint();
             if(!((VentanaInterna)vi).getLienzo().isRelleno()){
             mostrar_Color.setText("Color Borde : Rojo");
             }else{
                 mostrar_Relleno.setText("Color Relleno: Rojo");
             }
           }
    }//GEN-LAST:event_rojoActionPerformed
/**
 * Recoge evento de seleccion de color azul
 * @param evt ActionEvent
 */
    private void azulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_azulActionPerformed
       JInternalFrame vi = escritorio.getSelectedFrame();
           if ((vi != null)&&(vi instanceof VentanaInterna)){ ((VentanaInterna)vi).getLienzo().setColor(Color.BLUE);
             
             repaint();
             if(!((VentanaInterna)vi).getLienzo().isRelleno()){
             mostrar_Color.setText("Color Borde: Azul");
             }else{
                 mostrar_Relleno.setText("Color Relleno: Azul");
             }
           }
    }//GEN-LAST:event_azulActionPerformed
/**
 * Recoge evento de seleccion de color blanco
 * @param evt ActionEvent
 */
    private void blancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blancoActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
           if ((vi != null)&&(vi instanceof VentanaInterna)){ ((VentanaInterna)vi).getLienzo().setColor(Color.WHITE);
             
             repaint();
             if(!((VentanaInterna)vi).getLienzo().isRelleno()){
             mostrar_Color.setText("Color Borde: Blanco");
             }else{
                 mostrar_Relleno.setText("Color Relleno: Blanco");
             }
           }
    }//GEN-LAST:event_blancoActionPerformed
/**
 * Recoge evento de seleccion de color amarillo
 * @param evt ActionEvent
 */
    private void amarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amarilloActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
           if ((vi != null)&&(vi instanceof VentanaInterna)){ ((VentanaInterna)vi).getLienzo().setColor(Color.YELLOW);
             
             repaint();
             if(!((VentanaInterna)vi).getLienzo().isRelleno()){
             mostrar_Color.setText("Color Borde: Amarillo");
             }else{
                 mostrar_Relleno.setText("Color Relleno: Amarillo");
             }
           }
    }//GEN-LAST:event_amarilloActionPerformed
/**
 * Recoge evento de seleccion de color verde
 * @param evt ActionEvent
 */
    private void verdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verdeActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
           if ((vi != null)&&(vi instanceof VentanaInterna)){ ((VentanaInterna)vi).getLienzo().setColor(Color.GREEN);
             
             repaint();
             if(!((VentanaInterna)vi).getLienzo().isRelleno()){
             mostrar_Color.setText("Color Borde: Verde");
             }else{
                 mostrar_Relleno.setText("Color Relleno: Verde");
             }
           }
    }//GEN-LAST:event_verdeActionPerformed
/**
 * Recoge evento de seleccion de forma linea
 * @param evt ActionEvent
 */
    private void lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
   
        if ((vi != null)&&(vi instanceof VentanaInterna)) ((VentanaInterna)vi).getLienzo().setModo(FORMA_LINEA);
    
         mostrar_Seleccion.setText("Linea");
    }//GEN-LAST:event_lineaActionPerformed
/**
 * Recoge evento de seleccion de forma punto
 * @param evt ActionEvent
 */
    private void puntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puntoActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
     
        if ((vi != null)&&(vi instanceof VentanaInterna)) ((VentanaInterna)vi).getLienzo().setModo(FORMA_PUNTO);
 
         mostrar_Seleccion.setText("Lapiz");
    }//GEN-LAST:event_puntoActionPerformed
/**
 * Recoge evento de seleccion de forma rectangulo
 * @param evt ActionEvent
 */
    private void rectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloActionPerformed
         JInternalFrame vi = escritorio.getSelectedFrame();
    
    if ((vi != null)&&(vi instanceof VentanaInterna)) ((VentanaInterna)vi).getLienzo().setModo(FORMA_RECTANGULO);
    
    mostrar_Seleccion.setText("Rectangulo");
    }//GEN-LAST:event_rectanguloActionPerformed
/**
 * Recoge evento de seleccion de forma elipse
 * @param evt ActionEvent
 */
    private void elipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elipseActionPerformed
       JInternalFrame vi = escritorio.getSelectedFrame();
      
             if ((vi != null)&&(vi instanceof VentanaInterna)) ((VentanaInterna)vi).getLienzo().setModo(FORMA_OVALO);
      
             mostrar_Seleccion.setText("Elipse");
    }//GEN-LAST:event_elipseActionPerformed


    
    /**
     * Recoge Evento StateChange y asigna valor a stroke segun valor del spinner y si es discontinuo o no
     * @param evt ChangeEvent
     */
    private void grosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorStateChanged
            JInternalFrame vi = escritorio.getSelectedFrame();
            Stroke st;
            //Stroke st=new BasicStroke((Float)grosor.getValue()); fallo conversion
             if ((vi != null)&&(vi instanceof VentanaInterna)){
                if(!((VentanaInterna)vi).getLienzo().isDiscontinuidad()){
                  st=new BasicStroke((Integer)grosor.getValue());
                 //((VentanaInterna)vi).getLienzo().setStroke(st);
                }else{
                    float patronDiscontinuidad[] = {15.0f, 15.0f};
                      st = new BasicStroke((Integer)grosor.getValue(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_MITER, 1.0f,patronDiscontinuidad, 0.0f);
               
                }
                ((VentanaInterna)vi).getLienzo().setStroke(st);
             }
             repaint();
    }//GEN-LAST:event_grosorStateChanged
/**
 * Recoge evento de seleccion de alisar
 * @param evt ActionEvent
 */
    private void alisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisarActionPerformed
         JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            ((VentanaInterna)vi).getLienzo().setAlisado(alisar.isSelected());
        }
            
             repaint();
    }//GEN-LAST:event_alisarActionPerformed

/**
 * Recoge evento de edicion de formas
 * @param evt ActionEvent
 */
    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            ((VentanaInterna)vi).getLienzo().setEditar(editar.isSelected());
        }
            
             repaint();
    }//GEN-LAST:event_editarActionPerformed

/**
 * Recoge evento para generar nuevo lienzo
 * @param evt ActionEvent
 */
    private void nuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoArchivoActionPerformed
        //javadsdcero.comblogspot.com.es/2012/08/joptionpane-cuadros-de-dialogos.html
        //
        VentanaInterna vi = new VentanaInterna(this);
        
        JTextField ancho= new JTextField("300");
        JTextField alto= new JTextField("300");
        JFileChooser dlg = new JFileChooser();        

        Object[] ancho_alto ={ "Ancho ",ancho,"Alto",alto };
        JOptionPane.showConfirmDialog(this, ancho_alto,"Introduzca anchura y altura",JOptionPane.DEFAULT_OPTION);
                   
        
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(Integer.parseInt(ancho.getText()),Integer.parseInt(alto.getText()),BufferedImage.TYPE_INT_RGB);
        
//codigo para que sea blanco
        //vi.getLienzo().setImage(img);
       // vi.getLienzo().setImage(img);
        Color c= Color.WHITE;
        img.createGraphics().setPaint(c);//permite pintar en el
        Rectangle2D r= new Rectangle2D.Float(0,0,img.getWidth(),img.getHeight());
        img.createGraphics().fill(r);
        Lienzo2DImagenfinal li= (Lienzo2DImagenfinal)vi.getLienzo();
        li.setImage(img);
    }//GEN-LAST:event_nuevoArchivoActionPerformed


   /**
    *Recoge evento para abrir nuevo archivo, diferencia dos casos, si es imagen o audio y video 
    * @param evt ActionEvent
    */
    private void abrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoActionPerformed
        JFileChooser dlg = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Im√°genes", ImageIO.getWriterFormatNames());
       // dlg.setFileFilter(filter);
        dlg.addChoosableFileFilter(filter);
        
        String extension[]={"wav","mp3","ogg","avi","mpg"};  
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Videos y Audio",extension);
        dlg.addChoosableFileFilter(filtro);
       
        dlg.setFileFilter(filter);
        dlg.setFileFilter(filtro);
        dlg.setAcceptAllFileFilterUsed(false);
        
        
            int resp = dlg.showOpenDialog(this);
            if( resp == JFileChooser.APPROVE_OPTION) {
                
                File f = dlg.getSelectedFile();
                
                if(dlg.getFileFilter()==filter){
                    try{
                      BufferedImage img = ImageIO.read(f);
                      VentanaInterna vi = new VentanaInterna(this);
                      vi.getLienzo().setImage(img);
                      this.escritorio.add(vi);
                      vi.setTitle(f.getName());
                      vi.setVisible(true);
                    } catch(Exception ex){ System.err.println("Error al leer la imagen");
                     }
                  }else if(dlg.getFileFilter()==filtro){
                      try{
                    JInternalFrame vi = VentanaInternaJMFPlayer.getInstance(f);
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                      }catch(Exception ex){ System.err.println("Error al abrir video");
                     }
                }
                

}
    }//GEN-LAST:event_abrirArchivoActionPerformed
/**
 * Guarda archivo segun la extension indicada
 * @param evt ActionEvent
 * @return 
 */
    private void guardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoActionPerformed
         JInternalFrame vi= escritorio.getSelectedFrame(); 
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            
        JFileChooser dlg = new JFileChooser();
        
      
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Im√°genes", ImageIO.getWriterFormatNames());
        dlg.setFileFilter(filter);
        //dlg.addChoosableFileFilter(filter);
        int resp = dlg.showSaveDialog(this);
       
        if (resp == JFileChooser.APPROVE_OPTION) {
        try {
            ((VentanaInterna)vi).getLienzo().setPonerRecuadro(false);
            BufferedImage img = ((VentanaInterna)vi).getLienzo().getImage(true);
            if (img != null) {
                File f = dlg.getSelectedFile();
                String nombre= f.getName();
                /*http://www.tutorialspoint.com/java/java_string_lastindexof.htm*/
                int punto = nombre.lastIndexOf(".");
                String extension;
                if( punto!=-1){
                    extension = nombre.substring(punto+1);
                    
                }else{
                    extension ="";
                }
                ImageIO.write(img,extension , f);
                vi.setTitle(f.getName());
                
                //ImageIO.write(img, "jpg", f);
                ((VentanaInterna)vi).setTitle(f.getName());
                ((VentanaInterna)vi).getLienzo().setPonerRecuadro(true);
            }
        }catch (Exception ex) {
            System.err.println("Error al guardar la imagen");
        }
        }
    } 
    }//GEN-LAST:event_guardarArchivoActionPerformed

/**
 * Recoge evento y muestra barra formas segun seleccion o no
 * @param evt ActionEvent
 */
    private void ver_barra_formasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ver_barra_formasActionPerformed
      barraFormas.setVisible(ver_barra_formas.isSelected());
    }//GEN-LAST:event_ver_barra_formasActionPerformed

/**
 * Recoge evento y muestra barra estado segun seleccion o no
 * @param evt ActionEvent
 */
    private void ver_barra_estadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ver_barra_estadoActionPerformed
        mostrar_Seleccion.setVisible(ver_barra_estado.isSelected());
        mostrar_Color.setVisible(ver_barra_estado.isSelected());
        mostrar_Relleno.setVisible(ver_barra_estado.isSelected());
    }//GEN-LAST:event_ver_barra_estadoActionPerformed
/**
 * Recoge evento y muestra barra atributos segun seleccion o no
 * @param evt ActionEvent
 */
    private void ver_barra_atributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ver_barra_atributosActionPerformed
        barraAtrib.setVisible(ver_barra_atributos.isSelected());
        barraColor.setVisible(ver_barra_atributos.isSelected());
    }//GEN-LAST:event_ver_barra_atributosActionPerformed
/**
 * Aplica una operacion de escalado con valores fijos
 * @param evt ActionEvent
 */
    private void affineTransformOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affineTransformOpActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
            try{
              AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            
            BufferedImage imgdest = atop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_affineTransformOpActionPerformed

/**
 * Aplica transformacion T mediante LookupTable
 * @param evt ActionEvent
 */
    private void lookupOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookupOpActionPerformed
         JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            
           
            try{
             BufferedImage img = ImageTools.convertImageType(imgSource, BufferedImage.TYPE_INT_ARGB);
             LookupTable lt;
             lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);  
                
                
            LookupOp lop = new LookupOp(lt, null);
            //BufferedImage imgdest = lop.filter(imgSource, imgSource);
            BufferedImage imgdest = lop.filter(img, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_lookupOpActionPerformed
/**
 * Funcion para aplicar un filtro seno
 * @param w double
 * @return LookupTable
 * @deprecated Existe clase y esta funcion no se usa en el codigo
 */
     public static LookupTable seno(double w)
  {
    double K = (255.0);
    
    byte[] lt = new byte[256];
    
    for (int i = 0; i < 256; i++) {
      lt[i] = ((byte)(K * Math.abs(Math.sin(Math.toRadians(i * w)))));
    }
    ByteLookupTable lookdevuelto = new ByteLookupTable(0, lt);
    
    return lookdevuelto;
  }   
 
 /**
   * Realiza combinacion lineal de las bandas de imagen
   * @param evt ActionEvent
   */    
     /**
      * Realiza combinacion lineal de las bandas de imagen
      * @param evt ActionEvent
      */
    private void bandCombineOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandCombineOpActionPerformed
          JInternalFrame vi =  escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            
           
            try{
            
                float [][] m = {{1.0F,0.0F,0.0F},{0.0F,0.0F,1.0F},{0.0F,1.0F,0.0F}};
                BandCombineOp bcop = new BandCombineOp( m , null );
                WritableRaster rasterdest = bcop.filter(imgSource.getRaster(),null);
                BufferedImage imgdest = new BufferedImage(imgSource.getColorModel(),rasterdest,false,null);
          //  BufferedImage imgdest = lop.filter(img, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_bandCombineOpActionPerformed
/**
 * Realiza conversion de espacio pixel a pixel
 * @param evt ActionEvent
 */
    private void colorConvertOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorConvertOpActionPerformed
         JInternalFrame vi =  escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            
           
            try{
            
                ICC_Profile ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY);
                ColorSpace cs = new ICC_ColorSpace(ip);
                ColorConvertOp ccop = new ColorConvertOp(cs,null);
                BufferedImage imgdest = ccop.filter(imgSource,null);
          //  BufferedImage imgdest = lop.filter(img, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_colorConvertOpActionPerformed
/**
 * Aplica operacion de contraste a la imagen
 * @param evt ActionEvent
 */
    private void contrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteActionPerformed
       JInternalFrame vi =  escritorio.getSelectedFrame();

        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    int type = LookupTableProducer.TYPE_SFUNCION;
                    
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);

                    // Imagen origen y destino iguales
                    lop.filter( imgSource , imgSource);
                    vi.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrasteActionPerformed
/**
 * Aplica operacion de iluminacion a la imagen
 * @param evt ActionEvent
 */
    private void iluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminarActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();

        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    int type = LookupTableProducer.TYPE_LOGARITHM;
                    
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);

                    // Imagen origen y destino iguales
                    lop.filter( imgSource , imgSource);
                    vi.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_iluminarActionPerformed
/**
 * Aplica operacion de oscurecimiento a la imagen
 * @param evt ActionEvent
 */
    private void oscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecerActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();

        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    int type = LookupTableProducer.TYPE_POWER;
                    
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);

                    // Imagen origen y destino iguales
                    lop.filter( imgSource , imgSource);
                    vi.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_oscurecerActionPerformed
/**
 * Aplica filtro seno a la imagen
 * @param evt ActionEvent
 */
    private void sinusoidalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinusoidalActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();

        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
            if(imgSource!=null){
                try{
                        
                  
                
                    double w=180.0/255.0;
                    LookupTable lt =FiltroSeno.seno(w);
                    //LookupTable lt=seno(w);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSource , imgSource);
                    vi.repaint();
                    
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sinusoidalActionPerformed
/**
 * Rota 90 grados la imagen
 * @param evt ActionEvent
 */
    private void rotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90ActionPerformed
       JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
        try{
            
            double r = Math.toRadians(90);
            Point c = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
            AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
            AffineTransformOp atop;
            atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            BufferedImage imgdest = atop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
          }catch(IllegalArgumentException e){
           System.err.println(e.getLocalizedMessage());
          }
        }
        }  
    }//GEN-LAST:event_rotacion90ActionPerformed
/**
 * Rota 180 grados la imagen
 * @param evt ActionEvent
 */
    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
       JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
        try{
            double r = Math.toRadians(180);
            Point c = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
            AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
            AffineTransformOp atop;
            atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            BufferedImage imgdest = atop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
          }catch(IllegalArgumentException e){
           System.err.println(e.getLocalizedMessage());
          }
        }
        }  
    }//GEN-LAST:event_rotacion180ActionPerformed
/**
 * Rota 270 grados la imagen
 * @param evt ActionEvent
 */
    private void rotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270ActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
        try{
            double r = Math.toRadians(270);
            Point c = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
            AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
            AffineTransformOp atop;
            atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            BufferedImage imgdest = atop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
          }catch(IllegalArgumentException e){
           System.err.println(e.getLocalizedMessage());
          }
        }
        }  
    }//GEN-LAST:event_rotacion270ActionPerformed
/**
 * Escala la imagen por un factor de 1.25
 * @param evt ActionEvent
 */
    private void aumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
            try{
              AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            
            BufferedImage imgdest = atop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_aumentarActionPerformed
/**
 * Escala la imagen por un factor de 0.75
 * @param evt ActionEvent
 */
    private void disminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirActionPerformed
       JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            AffineTransform at = AffineTransform.getScaleInstance(0.75,0.75);
            try{
              AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            
            BufferedImage imgdest = atop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_disminuirActionPerformed
/**
 * Establece slider a valor cero
 * @param evt ActionEvent
 */
    private void rotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionFocusLost
        this.imgFuente=null;
        this.rotacion.setValue(0);
    }//GEN-LAST:event_rotacionFocusLost
/**
 * Si el foco se centra en el slider recoge la imagen y la carga en variable
 * @param evt ActionEvent
 */
    private void rotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionFocusGained
        JInternalFrame vi = escritorio.getSelectedFrame();
        if((vi!=null)&&(vi instanceof VentanaInterna)){
            this.imgFuente=((VentanaInterna)vi).getLienzo().getImage();
        }else{
            this.imgFuente=null;
        }
    }//GEN-LAST:event_rotacionFocusGained
/**
 * Recoge cambio de estado del slider y le aplica su valor a la rotacion de la imagen
 * @param evt ActionEvent
 */
    private void rotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotacionStateChanged
        double grado= Math.toRadians(this.rotacion.getValue());
        //rotacion(Math.toRadians(this.rotacion.getValue()), this.imgFuente);
        //VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        JInternalFrame vi = escritorio.getSelectedFrame();
   
  
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            //BufferedImage imgSource = vi.getLienzo().getImage();
        if(imgFuente!=null){
            //BufferedImage imgSource = vi.getLienzo().getImage();
        try{
            //double r = Math.toRadians(grado);
            Point c = new Point(imgFuente.getWidth()/2, imgFuente.getHeight()/2);
            AffineTransform at = AffineTransform.getRotateInstance(grado,c.x,c.y);
            AffineTransformOp atop;
            atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            BufferedImage imgdest = atop.filter(imgFuente, null);
            //imgdest = ImageTools.convertImageType(imgdest, BufferedImage.TYPE_INT_RGB);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
          }catch(IllegalArgumentException e){
           System.err.println(e.getLocalizedMessage());
          }
        }
        } 
    }//GEN-LAST:event_rotacionStateChanged
/**
 * Establece imagen a null y slider con valor a 128 cuando se pierde el foco
 * @param evt ActionEvent
 */
    private void umbralSliderColorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralSliderColorFocusLost
        this.imgFuente = null;
        this.umbralSliderColor.setValue(128);
    }//GEN-LAST:event_umbralSliderColorFocusLost
/**
 * Recoge imagen y la carga en variable
 * @param evt ActionEvent
 */
    private void umbralSliderColorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralSliderColorFocusGained
        JInternalFrame vi = escritorio.getSelectedFrame();
        if((vi!=null)&&(vi instanceof VentanaInterna)){
            this.imgFuente=((VentanaInterna)vi).getLienzo().getImage();
        }else{
            this.imgFuente=null;
        }
    }//GEN-LAST:event_umbralSliderColorFocusGained
/**
 * Aplica umbralizacion de color segun el color seleccionado en ventana principal 
 * @param evt ActionEvent
 */
    private void umbralSliderColorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbralSliderColorStateChanged
        int umbral= this.umbralSliderColor.getValue();
        //rotacion(Math.toRadians(this.rotacion.getValue()), this.imgFuente);
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            //BufferedImage imgSource = vi.getLienzo().getImage();
        if(imgFuente!=null){
            //BufferedImage imgSource = vi.getLienzo().getImage();
        try{
            //UmbralizacionOp uop= new UmbralizacionOp(umbral);
           
            //ThresholdOp uop= new ThresholdOp(Color.RED,umbral);
            //color seleccionado en el lienzo
            ThresholdOp uop= new ThresholdOp(((VentanaInterna)vi).getLienzo().getColor(),umbral);
            
            BufferedImage imgdest = uop.filter(imgFuente, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
          }catch(IllegalArgumentException e){
           System.err.println(e.getLocalizedMessage());
          }
        }
        } 
    }//GEN-LAST:event_umbralSliderColorStateChanged
/**
 * Operacion binaria de Suma ponderada de dos imagenes
 * @param evt ActionEvent
 */
    private void aumentarBinariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarBinariaActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(true);
        if (viNext != null) {
            BufferedImage imgRight = ((VentanaInterna)vi).getLienzo().getImage();
            BufferedImage imgLeft = viNext.getLienzo().getImage();
        if (imgRight != null && imgLeft != null) {
        try {
                //BinaryOp op = new SumaOp(imgLeft);
            BinaryOp op = new SumaOp(imgLeft,.5F);
                BufferedImage imgdest = op.filter(imgRight, null);
                vi = new VentanaInterna();
                ((VentanaInterna)vi).getLienzo().setImage(imgdest);
                this.escritorio.add(vi);
                vi.setVisible(true);
        } catch (IllegalArgumentException e) {
            System.err.println("Error: "+e.getLocalizedMessage());
        }
            }
            }
    }
    }//GEN-LAST:event_aumentarBinariaActionPerformed
/**
 * Operacion binaria de resta ponderada
 * @param evt ActionEvent
 */
    private void disminuirBinariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirBinariaActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(true);
        if (viNext != null) {
            BufferedImage imgRight = ((VentanaInterna)vi).getLienzo().getImage();
            BufferedImage imgLeft = viNext.getLienzo().getImage();
        if (imgRight != null && imgLeft != null) {
        try {
                //BinaryOp op = new SumaOp(imgLeft);
                BinaryOp op = new RestaOp(imgLeft);
                BufferedImage imgdest = op.filter(imgRight, null);
                vi = new VentanaInterna();
                ((VentanaInterna)vi).getLienzo().setImage(imgdest);
                this.escritorio.add(vi);
                vi.setVisible(true);
        } catch (IllegalArgumentException e) {
            System.err.println("Error: "+e.getLocalizedMessage());
        }
            }
            }
    }
    }//GEN-LAST:event_disminuirBinariaActionPerformed
/**
 * Operacion de tintado, usa clase propia, se realiza segun color seleccionado en ventana principal
 * @param evt ActionEvent
 */
    private void tintOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tintOpActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            //BufferedImage imgSource = vi.getLienzo().getImage();
        try{
            //TintadoOp top= new TintadoOp(Color.RED,0.5F);
            //tintado color seleccionado en lienzo
            TintadoOp top= new TintadoOp(((VentanaInterna)vi).getLienzo().getColor(),0.5F);
            
            BufferedImage imgdest = top.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
          }catch(IllegalArgumentException e){
           System.err.println(e.getLocalizedMessage());
          }
        }
        } 
    }//GEN-LAST:event_tintOpActionPerformed
/**
 * Realiza conversion a escala de grises de la imagen
 * @param evt ActionEvent
 */
    private void conversionGrisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conversionGrisActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
           
            try{
              ConversionGrisOp gop = new ConversionGrisOp();
            
            BufferedImage imgdest = gop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_conversionGrisActionPerformed
/**
 * Abre reproductor de audio con extension "wav","au","aif"
 * @param evt ActionEvent
 */
    private void abrirAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirAudioActionPerformed
       
    JFileChooser dlg = new JFileChooser();
    
  
    
    String extension[]={"wav","au","aif"};  
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Audio[wav,au,aif]",extension);
    dlg.setFileFilter(filtro);
    
    
    int resp = dlg.showOpenDialog(this);
    if (resp == JFileChooser.APPROVE_OPTION) {
      try
      {
        File f = dlg.getSelectedFile();
        JInternalFrame vi = new VentanaInternaReproductor(f);
        this.escritorio.add(vi);
        vi.setTitle(f.getName());
        vi.setVisible(true);
      }
      catch (Exception ex)
      {
        System.err.println("Error");
      }
    }
    }//GEN-LAST:event_abrirAudioActionPerformed
/**
 * Guarda audio
 * @param evt ActionEvent
 */
    private void guardarAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarAudioActionPerformed
        
        JFileChooser dlg = new JFileChooser();
    
    
    String extension[]={"wav","au","aif"};  
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Audio[wav,au,aif]",extension);
    dlg.setFileFilter(filtro);

    int resp = dlg.showSaveDialog(this);
    if (resp == JFileChooser.APPROVE_OPTION) {
      try
      {
        File f = dlg.getSelectedFile();
        JInternalFrame vi = new VentanaInternaGrabador(f);
        this.escritorio.add(vi);
        vi.setTitle(f.getName());
        vi.setVisible(true);
      }
      catch (Exception ex)
      {
        System.err.println("Error");
      }
    }
    }//GEN-LAST:event_guardarAudioActionPerformed
/**
 * Abre ventana de reproduccion multimedia
 * @param evt ActionEvent
 */
    private void abrirVentanaReproduccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirVentanaReproduccionActionPerformed
        JFileChooser dlg = new JFileChooser();
    
    
    String extension[]={"avi","wav","mp3","mp4","ogg","mpg"};  
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Audio y Video",extension);
    dlg.setFileFilter(filtro);
    dlg.setAcceptAllFileFilterUsed(false);
        
    int resp = dlg.showOpenDialog(this);
    if (resp == JFileChooser.APPROVE_OPTION) {
      try
      {
        File f = dlg.getSelectedFile();
        //JInternalFrame vi = new VentanaInternaJMFPlayer(f);
        JInternalFrame vi = VentanaInternaJMFPlayer.getInstance(f);
        this.escritorio.add(vi);
        vi.setTitle(f.getName());
        vi.setVisible(true);
      }
      catch (Exception ex)
      {
        System.err.println("Error");
      }
    }
    }//GEN-LAST:event_abrirVentanaReproduccionActionPerformed
/**
 * Abre ventana de webcam
 * @param evt ActionEvent
 */
    private void abrirVentanaCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirVentanaCamaraActionPerformed
        VentanaInternaCamara vi = VentanaInternaCamara.getInstance();
        if(vi!=null){
        this.escritorio.add(vi);
        //vi.setSize(250,250);
        vi.setTitle("WebCam");
        vi.setVisible(true);
        }
    }//GEN-LAST:event_abrirVentanaCamaraActionPerformed
/**
 * Abre ventana de reproduccion multimedia
 * @param evt ActionEvent
 */
    private void abrirReproduccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirReproduccionActionPerformed
        abrirVentanaReproduccionActionPerformed(evt);
    }//GEN-LAST:event_abrirReproduccionActionPerformed
/**
 * Abre ventana webcam
 * @param evt ActionEvent
 */
    private void camaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camaraActionPerformed
        abrirVentanaCamaraActionPerformed(evt) ;   
    }//GEN-LAST:event_camaraActionPerformed
/**
 * Realiza captura de pantalla de la webcam o ventana multimedia
 * @param evt ActionEvent
 */
    private void abrirVentanaCapturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirVentanaCapturaActionPerformed
        VentanaInterna vi= new VentanaInterna(this);
        JInternalFrame vic = escritorio.getSelectedFrame();
        if(vic instanceof VentanaInternaCamara){
          try{
            vi.getLienzo().setImage(this.getFrame(((VentanaInternaCamara)vic).getPlayer()));
            vi.setTitle("Instantanea");
            vi.setLocation(20+vi.getWidth(),0);
            vi.setVisible(true);
            this.escritorio.add(vi);
            }
          catch (Exception ex)
           {
        System.err.println("Error 1");
           }
        }else if(vic instanceof VentanaInternaJMFPlayer){
            try{
            vi.getLienzo().setImage(getFrame(((VentanaInternaJMFPlayer)vic).getPlayer()));
           // vi.getLienzo().setImage(((VentanaInternaJMFPlayer)vic).getFrame());  
            vi.setTitle("Instantanea");
            vi.setLocation(20+vi.getWidth(),0);
            vi.setVisible(true);
            this.escritorio.add(vi);
            }
          catch (Exception ex)
          {
        System.err.println("Error");
      }
        }
    }//GEN-LAST:event_abrirVentanaCapturaActionPerformed
/**
 * Llama a    guardarAudioActionPerformed(evt)
 * @param evt ActionEvent
 */
    private void guardarAudio_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarAudio_ActionPerformed
        guardarAudioActionPerformed(evt);
    }//GEN-LAST:event_guardarAudio_ActionPerformed
/**
 * Seleccion de forma rectangulo
 * @param evt ActionEvent
 */
    private void rectanguloRedondeadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloRedondeadoActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
      
             if ((vi != null)&&(vi instanceof VentanaInterna)) ((VentanaInterna)vi).getLienzo().setModo(FORMA_RECTANGULOREDONDEADO);
      
             mostrar_Seleccion.setText("Rectangulo Redondeado");
    }//GEN-LAST:event_rectanguloRedondeadoActionPerformed
/**
 * Seleccion de forma curva
 * @param evt ActionEvent
 */
    private void curvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curvaActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
      
             if ((vi != null)&&(vi instanceof VentanaInterna)) ((VentanaInterna)vi).getLienzo().setModo(FORMA_CURVA);
      
             mostrar_Seleccion.setText("Curva con un punto de control");
    }//GEN-LAST:event_curvaActionPerformed
/**
 * Lllama a abrirVentanaCapturaActionPerformed(evt);
 * @param evt ActionEvent
 */
    private void capturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capturaActionPerformed
        abrirVentanaCapturaActionPerformed(evt);
    }//GEN-LAST:event_capturaActionPerformed
/**
 * Realiza transformacion logaritmica a una imagen usando clase propia
 * @param evt ActionEvent
 */
    private void transLogaritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transLogaritmoActionPerformed
       JInternalFrame vi = escritorio.getSelectedFrame();

        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    
                   
                   // LookupOp lop = new LookupOp(lt, null);
                    //double w=180.0/255.0;
                    LookupTable lt =TransformacionLogaritmica.logaritmo();
                    //LookupTable lt=seno(w);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSource , imgSource);
                    vi.repaint();
                    
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_transLogaritmoActionPerformed
/**
 * Aplica raiz n-esima( clase propia ) a una imagen segun grado especificado
 * @param evt ActionEvent
 */
    private void raiznesimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raiznesimaActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();

        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    JTextField raz= new JTextField("2");
                    JFileChooser dlg = new JFileChooser();        

                    Object[] v_raz ={ "Raiz n-esima ",raz };
                    JOptionPane.showConfirmDialog(this, v_raz,"Introduzca valor Raiz n-esima",JOptionPane.DEFAULT_OPTION);
                       
                   //double w=2;
                
                    //LookupTable lt =RaizNesima.raiz(Integer.parseInt(raz.getText()));
                    LookupTable lt =RaizNesima.raiz(Double.parseDouble(raz.getText()));
                    //LookupTable lt=seno(w);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSource , imgSource);
                    vi.repaint();
                    
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_raiznesimaActionPerformed
/**
 * Aplica potencia n-esima( clase propia ) a una imagen segun grado especificado
 * @param evt ActionEvent
 */
    private void potencianesimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_potencianesimaActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();

        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    JTextField pot= new JTextField("2");
                    JFileChooser dlg = new JFileChooser();        

                    Object[] v_pot ={ "Potencia n-esima ",pot };
                    JOptionPane.showConfirmDialog(this, v_pot,"Introduzca valor Potencia n-esima",JOptionPane.DEFAULT_OPTION);
                       
                   //double w=2;
                    LookupTable lt =PotenciaNesima.potencia(Double.parseDouble(pot.getText()));
                    //LookupTable lt=seno(w);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSource , imgSource);
                    vi.repaint();
                    
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_potencianesimaActionPerformed
/**
 * Elimina mitad de la banda central(RGB) de la imagen , usa clase propia
 * @param evt ActionEvent
 */
    private void eliminarMitadBandaCentralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarMitadBandaCentralActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
           
            try{
              EliminacionMitadBandaCentralOp emop = new EliminacionMitadBandaCentralOp();
            
            BufferedImage imgdest = emop.filter(imgSource, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
  }
 }
}
    }//GEN-LAST:event_eliminarMitadBandaCentralActionPerformed
/**
 * Realiza un duplicado de la imagen
 * @param evt ActionEvent
 */
    private void duplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage(true);
        if(imgSource!=null){
            try{
                VentanaInterna vid = new VentanaInterna(this);
                vid.getLienzo().setImage(imgSource);               
                vid.setTitle("Duplicado");
                vid.setVisible(true);
                escritorio.add(vid);
        }catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
  }
        } }     
    }//GEN-LAST:event_duplicarActionPerformed
/**
 * Recoge imagen y la carga en variable
 * @param evt ActionEvent
 */
    private void umbralSliderGrisFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralSliderGrisFocusGained
         JInternalFrame vi = escritorio.getSelectedFrame();
        if((vi!=null)&&(vi instanceof VentanaInterna)){
            this.imgFuente=((VentanaInterna)vi).getLienzo().getImage();
        }else{
            this.imgFuente=null;
        }
    }//GEN-LAST:event_umbralSliderGrisFocusGained
/**
 * Establece imagen a null y slider con valor a 128 cuando se pierde el foco
 * @param evt ActionEvent
 */
    private void umbralSliderGrisFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralSliderGrisFocusLost
         this.imgFuente = null;
        this.umbralSliderGris.setValue(128);
    }//GEN-LAST:event_umbralSliderGrisFocusLost
/**
 * Aplica umbralizacion de escala de grises a la imagen
 */
    private void umbralSliderGrisStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbralSliderGrisStateChanged
        int umbral= this.umbralSliderGris.getValue();
        JInternalFrame vi = escritorio.getSelectedFrame();
        
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            //BufferedImage imgSource = vi.getLienzo().getImage();
        if(imgFuente!=null){
            
        try{
            UmbralizacionOp uop = new UmbralizacionOp(umbral);
            //ThresholdOp uop= new ThresholdOp(umbral);
            
            BufferedImage imgdest = uop.filter(imgFuente, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
          }catch(IllegalArgumentException e){
           System.err.println(e.getLocalizedMessage());
          }
        }
        } 
    }//GEN-LAST:event_umbralSliderGrisStateChanged
/**
 * Aplica filtro negativo a una imagen
 * @param evt ActionEvent
 */
    private void negativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativoActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            BufferedImage imgSource = ((VentanaInterna)vi).getLienzo().getImage();
        if(imgSource!=null){
            
           
            try{
             BufferedImage img = ImageTools.convertImageType(imgSource, BufferedImage.TYPE_INT_ARGB);
             //BufferedImage img = ImageTools.convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
             LookupTable lt;
             lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);  
                
                
            LookupOp lop = new LookupOp(lt, null);
            //BufferedImage imgdest = lop.filter(imgSource, imgSource);
            BufferedImage imgdest = lop.filter(img, null);
            ((VentanaInterna)vi).getLienzo().setImage(imgdest);
            ((VentanaInterna)vi).getLienzo().repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
}
}
}
    }//GEN-LAST:event_negativoActionPerformed
/**
 * Establece discontinuidad del stroke usado en lienzo
 * @param evt ActionEvent
 */
    private void discontinuidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discontinuidadActionPerformed
       JInternalFrame vi = escritorio.getSelectedFrame();
        Stroke st;
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            ((VentanaInterna)vi).getLienzo().setDiscontinuidad(discontinuidad.isSelected());
            if(!((VentanaInterna)vi).getLienzo().isDiscontinuidad()){
                  st=new BasicStroke((Integer)grosor.getValue());
                 //((VentanaInterna)vi).getLienzo().setStroke(st);
                }else{
                    float patronDiscontinuidad[] = {15.0f, 15.0f};
                      st = new BasicStroke((Integer)grosor.getValue(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_MITER, 1.0f,patronDiscontinuidad, 0.0f);
               
                }
                ((VentanaInterna)vi).getLienzo().setStroke(st);
        }
            
             repaint();
       
    }//GEN-LAST:event_discontinuidadActionPerformed
/**
 * Mensaje de informacion
 * @param evt ActionEvent
 */
    private void acercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercaDeActionPerformed
        JOptionPane.showMessageDialog(null, "Autor: Francisco Javier Garrido Mellado\n" + "Programa: Paint Multimedia\n"+"Version: 2.0","SMM", JOptionPane.DEFAULT_OPTION, new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/info_icon.png")));
        
    }//GEN-LAST:event_acercaDeActionPerformed
/**
 * Establece el tipo de relleno
 * @param evt ActionEvent
 */
    private void tipoRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoRellenoActionPerformed
         JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            int rell= tipoRelleno.getSelectedIndex();
           
            if(rell==0){
                ((VentanaInterna)vi).getLienzo().setRelleno(false);
                ((VentanaInterna)vi).getLienzo().setDegradadovertical(false);
                  ((VentanaInterna)vi).getLienzo().setDegradadohorizontal(false);
            }else if(rell==1){
                ((VentanaInterna)vi).getLienzo().setRelleno(true);
                 ((VentanaInterna)vi).getLienzo().setDegradadovertical(false);
                  ((VentanaInterna)vi).getLienzo().setDegradadohorizontal(false);
            }else if(rell==2){
                ((VentanaInterna)vi).getLienzo().setRelleno(true);
                ((VentanaInterna)vi).getLienzo().setDegradadohorizontal(true);
                 ((VentanaInterna)vi).getLienzo().setDegradadovertical(false);
            }else if(rell==3){
                ((VentanaInterna)vi).getLienzo().setRelleno(true);
                 ((VentanaInterna)vi).getLienzo().setDegradadohorizontal(false);
                 ((VentanaInterna)vi).getLienzo().setDegradadovertical(true);
            }
            
            //((VentanaInterna)vi).getLienzo().setRelleno(relleno.isSelected());
        }
            
             repaint();
    }//GEN-LAST:event_tipoRellenoActionPerformed
/**
 * Establece el tipo transparencia segun combobox
 * @param evt ActionEvent
 */
    private void tipoTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoTransparenciaActionPerformed
        JInternalFrame vi = escritorio.getSelectedFrame();
        if ((vi != null)&&(vi instanceof VentanaInterna)) {
            int trans= tipoTransparencia.getSelectedIndex();
            Composite comp=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f);
           
            if(trans==0){
                comp=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f);
                ((VentanaInterna)vi).getLienzo().setGrado_transparencia(0);
            }else if(trans==1){
                comp=AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.75f);
                ((VentanaInterna)vi).getLienzo().setGrado_transparencia(1);
            }else if(trans==2){
                comp=AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
                ((VentanaInterna)vi).getLienzo().setGrado_transparencia(2);
            }else if(trans==3){
                comp=AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.25f);
                ((VentanaInterna)vi).getLienzo().setGrado_transparencia(3);
                //System.out.println("entra");
            }
            ((VentanaInterna)vi).getLienzo().setComp(comp);
            
            //((VentanaInterna)vi).getLienzo().setRelleno(relleno.isSelected());
        }
            
             repaint();
    }//GEN-LAST:event_tipoTransparenciaActionPerformed
/**
 * Abre dialogo de paleta de color
 * @param evt ActionEvent
 */
    private void paletaColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paletaColoresActionPerformed
           JInternalFrame vi = escritorio.getSelectedFrame();
           if ((vi != null)&&(vi instanceof VentanaInterna)){
               Color eleccion = JColorChooser.showDialog(this, "Seleccione color", Color.BLACK);
               ((VentanaInterna)vi).getLienzo().setColor(eleccion);
           
             
             repaint();
             if(!((VentanaInterna)vi).getLienzo().isRelleno()){
                 mostrar_Color.setText("Color Borde: " + eleccion.toString());
             }else{
                 mostrar_Relleno.setText("Color Relleno: " + eleccion.toString());
             }
           }
    }//GEN-LAST:event_paletaColoresActionPerformed
/**
 * Recoge evento y muestra herramientas de imagenes
 * @param evt ActionEvent
 */
    private void ver_barra_atrib_imagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ver_barra_atrib_imagenActionPerformed
        barraAtributosImagenes.setVisible(ver_barra_atrib_imagen.isSelected());
    }//GEN-LAST:event_ver_barra_atrib_imagenActionPerformed

/**
 * Abre reproductor de Audio con barra de progreso
 * @param evt java.awt.event.ActionEvent
 */    
    private void reproductorHebraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproductorHebraActionPerformed
        JFileChooser dlg = new JFileChooser();
    
  
    
    String extension[]={"wav","au","aif"};  
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Audio[wav,au,aif]",extension);
    dlg.setFileFilter(filtro);
    
    
    int resp = dlg.showOpenDialog(this);
    if (resp == JFileChooser.APPROVE_OPTION) {
      try
      {
        File f = dlg.getSelectedFile();
        JInternalFrame vi = new VentanaInternaReproductorHebra(f);
        this.escritorio.add(vi);
        vi.setTitle(f.getName());
        vi.setVisible(true);
      }
      catch (Exception ex)
      {
        System.err.println("Error");
      }
    }
    }//GEN-LAST:event_reproductorHebraActionPerformed
/**
 * Abre navegador de archivos para elegir archivo de audio a reproducir en VentanaPrincipal
 * @param evt java.awt.event.ActionEvent
 */
    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
      JFileChooser dlg = new JFileChooser();  
      String extension[]={"wav","au","aif"};  
      FileNameExtensionFilter filtro = new FileNameExtensionFilter("Audio[wav,au,aif]",extension);
      dlg.setFileFilter(filtro);
    
    
      int resp = dlg.showOpenDialog(this);
      if (resp == JFileChooser.APPROVE_OPTION) {
      
          try
      {
        File f = dlg.getSelectedFile();
        player = new SMClipPlayer(f);
        if((hebra!=null)||(barraProgreso.getValue()!=0)){
            hebra.thr.suspend();
            barraProgreso.setValue(0);
            hebra=null;
        }
      }
      catch (Exception ex)
      {
        System.err.println("Error");
      }
    }  
    }//GEN-LAST:event_openActionPerformed

    /**
     * Recoge evento de reproduccion de audio, inicia barra de progreso
     * @param evt java.awt.event.ActionEvent
     */
    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        if(player!=null){
            player.play();
        
            if(hebra==null){
                //runner = new Thread(this);
                hebra=new Hilo();
                hebra.thr.start();
            }else{
                hebra.thr.resume();
                //runner.thr.notifyAll();
                
            }
            
        }
    }//GEN-LAST:event_playActionPerformed
/**
 * Recoge evento y pausa la reproduccion de audio y el avance de la barra de progreso
 * @param evt java.awt.event.ActionEvent
 */
    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        if(player!=null){
            player.pause();
            
            //new Thread(new Hilo()).start();
            
            //if(hebra!=null){
            if(hebra.thr.isAlive()){    
                hebra.thr.suspend();
                //runner.thr.notifyAll();
                
            }
            
        }
    }//GEN-LAST:event_pauseActionPerformed
/**
 * Recoge evento y para la reproduccion de audio asi como la barra de progreso
 * @param evt 
 */
    
    
    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
       if(player!=null) player.stop();
        if(hebra.thr.isAlive()){
            hebra.thr.suspend();
           // hebra=null;
           // barraProgreso.setValue(0);
        }
       hebra=null; 
       barraProgreso.setValue(0);
    }//GEN-LAST:event_stopActionPerformed

    /**
   * Clase Hilo que implementa la interfaz Runnable, incrementa la barra progreso
   */  
    
   class Hilo implements Runnable{
       protected Thread thr;
       
       public Hilo(){
           thr = new Thread( this ) ;
       }
       /**
        * Metodo run de la hebra que es invocado cuando se llama al metodo start del objeto hebra declarado
        */
        @Override
        public void run() {
            for(int x=0;x<100;x++){
                barraProgreso.setValue(x);
                barraProgreso.repaint();
            
            try{
                Thread.sleep(100);
            }catch(Exception e){
            }
            }
        }
        
    }
    
    
    /**
 * Recoge frame o instantanea
 * @param player Player
 * @return BufferedImage
 */
public BufferedImage getFrame(Player player){
    FrameGrabbingControl fgc;
    String claseCtr = "javax.media.control.FrameGrabbingControl";
    fgc = (FrameGrabbingControl)player.getControl(claseCtr );
    Buffer bufferFrame = fgc.grabFrame();
    BufferToImage bti;
    bti=new BufferToImage((VideoFormat)bufferFrame.getFormat());
    Image img = bti.createImage(bufferFrame);
    return (BufferedImage)img;
   
}
    
    
  /**
   * Convierte imagen al tipo especificado
   * @param img BufferedImage
   * @param type int
   * @return BufferedImage
   */  
    BufferedImage convertImageType(BufferedImage img, int type){
        if(img==null) return null;
            BufferedImage imgOut = new BufferedImage(img.getWidth(),
            img.getHeight(), type);
            Graphics2D g2d = imgOut.createGraphics();
            g2d.drawImage(img,0,0,null);
        return imgOut;
}
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrir;
    private javax.swing.JToggleButton abrirArchivo;
    private javax.swing.JMenuItem abrirAudio;
    private javax.swing.JButton abrirReproduccion;
    private javax.swing.JMenuItem abrirVentanaCamara;
    private javax.swing.JMenuItem abrirVentanaCaptura;
    private javax.swing.JMenuItem abrirVentanaReproduccion;
    private javax.swing.JMenuItem acercaDe;
    private javax.swing.JMenuItem affineTransformOp;
    private javax.swing.JToggleButton alisar;
    private javax.swing.JButton amarillo;
    private javax.swing.JMenu archivo;
    private javax.swing.JPanel archivosGestion;
    private javax.swing.JButton aumentar;
    private javax.swing.JButton aumentarBinaria;
    private javax.swing.JButton azul;
    private javax.swing.JMenuItem bandCombineOp;
    private javax.swing.JPanel barraAtrib;
    private javax.swing.JToolBar barraAtributosImagenes;
    private javax.swing.JPanel barraColor;
    private javax.swing.JPanel barraFormas;
    private javax.swing.JPanel barraMultimedia;
    private javax.swing.JProgressBar barraProgreso;
    private javax.swing.JButton blanco;
    private javax.swing.JSlider brilloSlider;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.JButton camara;
    private javax.swing.JButton captura;
    private javax.swing.JMenuItem colorConvertOp;
    private javax.swing.JButton contraste;
    private javax.swing.JMenuItem conversionGris;
    private javax.swing.JMenuItem convolveOp;
    private javax.swing.JToggleButton curva;
    private javax.swing.JToggleButton discontinuidad;
    private javax.swing.JButton disminuir;
    private javax.swing.JButton disminuirBinaria;
    private javax.swing.JMenuItem duplicar;
    private javax.swing.JToggleButton editar;
    private javax.swing.JMenuItem eliminarMitadBandaCentral;
    private javax.swing.JToggleButton elipse;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JComboBox filtro;
    private javax.swing.JSpinner grosor;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JToggleButton guardarArchivo;
    private javax.swing.JMenuItem guardarAudio;
    private javax.swing.JButton guardarAudio_;
    private javax.swing.JButton iluminar;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToggleButton linea;
    private javax.swing.JMenuItem lookupOp;
    private javax.swing.JMenu men_imagen;
    private javax.swing.JMenu men_info;
    private javax.swing.JLabel mostrar_Color;
    private javax.swing.JLabel mostrar_Relleno;
    private javax.swing.JLabel mostrar_Seleccion;
    private javax.swing.JMenuItem negativo;
    private javax.swing.JButton negro;
    private javax.swing.JMenuItem nuevo;
    private javax.swing.JToggleButton nuevoArchivo;
    private javax.swing.JButton open;
    private javax.swing.JButton oscurecer;
    private javax.swing.JToggleButton paletaColores;
    private javax.swing.JButton pause;
    private javax.swing.JButton play;
    private javax.swing.JMenuItem potencianesima;
    private javax.swing.JMenu propias;
    private javax.swing.JToggleButton punto;
    private javax.swing.JMenuItem raiznesima;
    private javax.swing.JToggleButton rectangulo;
    private javax.swing.JToggleButton rectanguloRedondeado;
    private javax.swing.JButton reproductorHebra;
    private javax.swing.JMenuItem rescaleOp;
    private javax.swing.JButton rojo;
    private javax.swing.JSlider rotacion;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton rotacion270;
    private javax.swing.JButton rotacion90;
    private javax.swing.JButton sinusoidal;
    private javax.swing.JButton stop;
    private javax.swing.JMenuItem tintOp;
    private javax.swing.JComboBox tipoRelleno;
    private javax.swing.JComboBox tipoTransparencia;
    private javax.swing.JMenuItem transLogaritmo;
    private javax.swing.JSlider umbralSliderColor;
    private javax.swing.JSlider umbralSliderGris;
    private javax.swing.JMenu ver;
    private javax.swing.JCheckBoxMenuItem ver_barra_atrib_imagen;
    private javax.swing.JCheckBoxMenuItem ver_barra_atributos;
    private javax.swing.JCheckBoxMenuItem ver_barra_estado;
    private javax.swing.JCheckBoxMenuItem ver_barra_formas;
    private javax.swing.JButton verde;
    // End of variables declaration//GEN-END:variables
/**
 * Devuelve combobox
 * @return JComboBox
 */
    public JComboBox getTipoRelleno() {
        return tipoRelleno;
    }
/**
 * Establece combobox
 * @param tipoRelleno JComboBox
 */
    public void setTipoRelleno(JComboBox tipoRelleno) {
        this.tipoRelleno = tipoRelleno;
    }
/**
 * Devuelve combobox
 * @return JComboBox
 */
    public JComboBox getTipoTransparencia() {
        return tipoTransparencia;
    }
/**
 * Establece combobox
 * 
 * @param tipoTransparencia JComboBox
 */
    public void setTipoTransparencia(JComboBox tipoTransparencia) {
        this.tipoTransparencia = tipoTransparencia;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JToggleButton getDiscontinuidad() {
        return discontinuidad;
    }
/**
 * Devuelve slider
 * @return JSlider
 */
    public JSlider getBrilloSlider() {
        return brilloSlider;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JToggleButton getCurva() {
        return curva;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JToggleButton getAlisar() {
        return alisar;
    }
/**
 * Devuelve boton
 * @return JButton
 */
    public JButton getAmarillo() {
        return amarillo;
    }
/**
 * Devuelve boton
 * @return JButton
 */
    public JButton getAzul() {
        return azul;
    }
/**
 * Devuelve boton
 * @return JButton
 */
    public JButton getBlanco() {
        return blanco;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JToggleButton getEditar() {
        return editar;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JToggleButton getElipse() {
        return elipse;
    }
/**
 * Devuelve spinner
 * @return JSpinner
 */
    public JSpinner getGrosor() {
        return grosor;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JToggleButton getLinea() {
        return linea;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JButton getNegro() {
        return negro;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JToggleButton getPunto() {
        return punto;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JToggleButton getRectangulo() {
        return rectangulo;
    }
/**
 * Devuelve boton
 * @return JToggleButton
 */
    public JToggleButton getRectanguloRedondeado() {
        return rectanguloRedondeado;
    }

   /* public JToggleButton getRelleno() {
        return relleno;
    }*/
/**
 * Devuelve boton
 * @return JButton
 */
    public JButton getRojo() {
        return rojo;
    }

   /* public JToggleButton getTransparencia() {
        return transparencia;
    }*/
/**
 * Devuelve boton
 * @return JButton
 */
    public JButton getVerde() {
        return verde;
    }

   

    
}
