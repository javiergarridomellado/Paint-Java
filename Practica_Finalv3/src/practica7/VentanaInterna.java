/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica7;

import java.awt.BasicStroke;
import java.awt.Color;

import sm.fgm.iu.Lienzo2DImagenfinal;


/**
 *Clase VentanaInterna donde se monta el lienzoImagen para dibujado e imagenes
 * @author javi
 */
public class VentanaInterna extends javax.swing.JInternalFrame {
    VentanaPrincipal VP = null;
 
     /**
     * Constructor de la clase
     * @param v VentanaPrincipal para saber quien es el padre
     */
     public VentanaInterna(VentanaPrincipal v)
  {
        initComponents();
        VP = v;
        this.setSize(300, 300);
  }

    /**
     * Constructor por defecto
     */
    public VentanaInterna() {
        initComponents();
        this.setSize(600, 400);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        lienzo = new sm.fgm.iu.Lienzo2DImagenfinal();

        FormListener formListener = new FormListener();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Nuevo Lienzo");
        addInternalFrameListener(formListener);

        lienzo.setOpaque(false);

        javax.swing.GroupLayout lienzoLayout = new javax.swing.GroupLayout(lienzo);
        lienzo.setLayout(lienzoLayout);
        lienzoLayout.setHorizontalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
        );
        lienzoLayout.setVerticalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 302, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(lienzo);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements javax.swing.event.InternalFrameListener {
        FormListener() {}
        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            if (evt.getSource() == VentanaInterna.this) {
                VentanaInterna.this.formInternalFrameActivated(evt);
            }
        }

        public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents
/**
 * Metodo que recoge el estado del lienzo asociado a la ventana, envia dicho estado a la ventana principal
 * @param evt 
 */
    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        if(this.lienzo.getModo()==0){
          VP.getPunto().setSelected(true);
        }else if(this.lienzo.getModo()==1){
          VP.getLinea().setSelected(true);
        }else if(this.lienzo.getModo()==2){
          VP.getRectangulo().setSelected(true);
        }else if(this.lienzo.getModo()==3){
          VP.getElipse().setSelected(true);
        }else if(this.lienzo.getModo()==4){
           VP.getRectanguloRedondeado().setSelected(true);
        }else if(this.lienzo.getModo()==5){
            VP.getCurva().setSelected(true);
        }
        
       /* editar, alisar,....*/
        VP.getDiscontinuidad().setSelected(this.lienzo.isDiscontinuidad());
        VP.getAlisar().setSelected(this.lienzo.isAlisado());
        VP.getEditar().setSelected(this.lienzo.isEditar());
     
        if(!(this.lienzo.isRelleno())&& !(this.lienzo.isDegradadohorizontal()) && !(this.lienzo.isDegradadovertical())){
            VP.getTipoRelleno().setSelectedIndex(0);
        }else if((this.lienzo.isRelleno())&& !(this.lienzo.isDegradadohorizontal()) && !(this.lienzo.isDegradadovertical())){
            VP.getTipoRelleno().setSelectedIndex(1);
        }else if((this.lienzo.isRelleno())&& (this.lienzo.isDegradadohorizontal()) && !(this.lienzo.isDegradadovertical())){
            VP.getTipoRelleno().setSelectedIndex(2);
        }else if((this.lienzo.isRelleno())&& !(this.lienzo.isDegradadohorizontal()) && (this.lienzo.isDegradadovertical())){
            VP.getTipoRelleno().setSelectedIndex(3); 
        }
        
        if(this.lienzo.getGrado_transparencia()==0){
            VP.getTipoTransparencia().setSelectedIndex(0);
        }else if(this.lienzo.getGrado_transparencia()==1){
            VP.getTipoTransparencia().setSelectedIndex(1);
        }else if(this.lienzo.getGrado_transparencia()==2){
             VP.getTipoTransparencia().setSelectedIndex(2);
        }else if(this.lienzo.getGrado_transparencia()==3){
            VP.getTipoTransparencia().setSelectedIndex(3);
        }
        
         if(this.lienzo.getColor()==Color.BLACK){
            VP.getNegro().setSelected(true);
        }else if(this.lienzo.getColor()==Color.RED){
            VP.getRojo().setSelected(true);
        }else if(this.lienzo.getColor()==Color.BLUE){
             VP.getAzul().setSelected(true);
        }else if(this.lienzo.getColor()==Color.WHITE){
            VP.getBlanco().setSelected(true);
        }else if(this.lienzo.getColor()==Color.YELLOW){
           VP.getAmarillo().setSelected(true);
        }else if(this.lienzo.getColor()==Color.GREEN){
           VP.getVerde().setSelected(true);
        }else{
            this.getLienzo().setColor(this.lienzo.getColor());
        }
        
        //VP.getRelleno().setSelected(this.lienzo.isRelleno());
        //VP.getTransparencia().setSelected(this.lienzo.isTransparencia());
       // VP.getDiscontinuidad().setSelected(this.lienzo.isDiscontinuidad());
        //Integer s=(Integer)VP.getGrosor().getValue();
        BasicStroke s= (BasicStroke)(this.lienzo.getStroke());
        Integer gr;
        gr = ((int)s.getLineWidth());
        
        VP.getGrosor().setValue(gr);
        //VP.grosor.setValue(0);
        //System.out.println(this.lienzo.getBrillo());
        //VP.getBrilloSlider().setValue(this.lienzo.getBrillo());
    }//GEN-LAST:event_formInternalFrameActivated


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private sm.fgm.iu.Lienzo2DImagenfinal lienzo;
    // End of variables declaration//GEN-END:variables
/**
 * Metodo que devuelve el lienzo
 * @return LienzoImagenfinal
 */
    public Lienzo2DImagenfinal getLienzo() {
        return lienzo;
    }
    
     
   
}
